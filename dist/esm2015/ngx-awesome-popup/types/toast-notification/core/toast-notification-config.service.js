import { Inject, Injectable } from '@angular/core';
import { DialogLayoutDisplay } from '../../../core/enums';
import { GlobalClass } from '../../../core/global';
import { ToastNotificationClass, ToastPositionEnum, ToastProgressBarEnum, ToastUserViewTypeEnum } from './model';
import * as i0 from "@angular/core";
export class ToastNotificationConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new ToastNotificationClass.Settings();
        this.productionConfig = new ToastNotificationClass.Settings();
        this.dataControl = new GlobalClass.DataControl();
        // region *** confirmBox userConfig (user input app-module) ***
        const userConfigBase = new ToastNotificationClass.Settings();
        this.dataControl.copyValuesFrom(userConfig.ToastCoreConfig, userConfigBase.ToastCoreConfig); // this will make sure that object has right properties
        userConfig.ToastCoreConfig = userConfigBase.ToastCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.ToastCoreConfig.ButtonPosition = 'right';
        this.authorConfig.ToastCoreConfig.TextPosition = 'left';
        this.authorConfig.ToastCoreConfig.ToastPosition = ToastPositionEnum.TOP_RIGHT;
        this.authorConfig.ToastCoreConfig.ProgressBar = ToastProgressBarEnum.INCREASE;
        this.authorConfig.ToastCoreConfig.ToastUserViewType = ToastUserViewTypeEnum.STANDARD;
        this.authorConfig.ToastCoreConfig.AutoCloseDelay = 2500;
        this.authorConfig.ToastCoreConfig.DisableIcon = false;
        this.authorConfig.ToastCoreConfig.AllowHTMLMessage = true;
        this.authorConfig.ToastCoreConfig.LayoutType = DialogLayoutDisplay.NONE;
        this.authorConfig.GlobalSettings.AllowedNotificationsAtOnce = 5;
        // endregion
        // region *** Production setup ***
        this.setResetGlobalToastConfig();
        this.dataControl.copyValuesFrom(this.authorConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        this.dataControl.copyValuesFrom(this.userConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        // endregion
    }
    setResetGlobalToastConfig(globalToastConfig) {
        this.dataControl.copyValuesFrom(this.authorConfig.GlobalSettings, this.productionConfig.GlobalSettings);
        this.dataControl.copyValuesFrom(globalToastConfig ? globalToastConfig : this.userConfig.GlobalSettings, this.productionConfig.GlobalSettings);
    }
}
ToastNotificationConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastNotificationConfigService_Factory() { return new ToastNotificationConfigService(i0.ɵɵinject("toastNotificationConfig")); }, token: ToastNotificationConfigService, providedIn: "root" });
ToastNotificationConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ToastNotificationConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['toastNotificationConfig',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvdG9hc3Qtbm90aWZpY2F0aW9uL2NvcmUvdG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsc0JBQXNCLEVBQThCLGlCQUFpQixFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFDLE1BQU0sU0FBUyxDQUFDOztBQUszSSxNQUFNLE9BQU8sOEJBQThCO0lBTTFDLFlBQXVELGFBQXNFLEVBQUU7UUFBeEUsZUFBVSxHQUFWLFVBQVUsQ0FBOEQ7UUFKL0gsaUJBQVksR0FBZ0UsSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsSCxxQkFBZ0IsR0FBNEQsSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxRyxnQkFBVyxHQUF5RCxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUl6RywrREFBK0Q7UUFDL0QsTUFBTSxjQUFjLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUU3RCxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLHVEQUF1RDtRQUVwSixVQUFVLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7UUFDNUQsWUFBWTtRQUVaLDBFQUEwRTtRQUMxRSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEdBQWMsT0FBTyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBZ0IsTUFBTSxDQUFDO1FBQ3JFLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGFBQWEsR0FBZSxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7UUFDMUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFpQixvQkFBb0IsQ0FBQyxRQUFRLENBQUM7UUFDNUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEdBQVcscUJBQXFCLENBQUMsUUFBUSxDQUFDO1FBQzdGLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGNBQWMsR0FBYyxJQUFJLENBQUM7UUFDbkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsV0FBVyxHQUFpQixLQUFLLENBQUM7UUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEdBQVksSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBa0IsbUJBQW1CLENBQUMsSUFBSSxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVoRSxZQUFZO1FBRVosa0NBQWtDO1FBRWxDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEcsWUFBWTtJQUdiLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxpQkFBbUU7UUFDNUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9JLENBQUM7Ozs7WUE5Q0QsVUFBVSxTQUFDO2dCQUNYLFVBQVUsRUFBRSxNQUFNO2FBQ2xCOzs7NENBT2EsTUFBTSxTQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlhbG9nTGF5b3V0RGlzcGxheX0gZnJvbSAnLi4vLi4vLi4vY29yZS9lbnVtcyc7XG5pbXBvcnQge0dsb2JhbENsYXNzfSBmcm9tICcuLi8uLi8uLi9jb3JlL2dsb2JhbCc7XG5pbXBvcnQge1RvYXN0Tm90aWZpY2F0aW9uQ2xhc3MsIFRvYXN0Tm90aWZpY2F0aW9uSW50ZXJmYWNlLCBUb2FzdFBvc2l0aW9uRW51bSwgVG9hc3RQcm9ncmVzc0JhckVudW0sIFRvYXN0VXNlclZpZXdUeXBlRW51bX0gZnJvbSAnLi9tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcblx0cHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnU2VydmljZSB7XG5cblx0YXV0aG9yQ29uZmlnOiBUb2FzdE5vdGlmaWNhdGlvbkludGVyZmFjZS5JVG9hc3ROb3RpZmljYXRpb25Vc2VyQ29uZmlnICAgICA9IG5ldyBUb2FzdE5vdGlmaWNhdGlvbkNsYXNzLlNldHRpbmdzKCk7XG5cdHByb2R1Y3Rpb25Db25maWc6IFRvYXN0Tm90aWZpY2F0aW9uSW50ZXJmYWNlLklUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSBuZXcgVG9hc3ROb3RpZmljYXRpb25DbGFzcy5TZXR0aW5ncygpO1xuXHRwcml2YXRlIGRhdGFDb250cm9sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG5cblx0Y29uc3RydWN0b3IoQEluamVjdCgndG9hc3ROb3RpZmljYXRpb25Db25maWcnKSBwcml2YXRlIHVzZXJDb25maWc6IFRvYXN0Tm90aWZpY2F0aW9uSW50ZXJmYWNlLklUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSB7fSkge1xuXG5cdFx0Ly8gcmVnaW9uICoqKiBjb25maXJtQm94IHVzZXJDb25maWcgKHVzZXIgaW5wdXQgYXBwLW1vZHVsZSkgKioqXG5cdFx0Y29uc3QgdXNlckNvbmZpZ0Jhc2UgPSBuZXcgVG9hc3ROb3RpZmljYXRpb25DbGFzcy5TZXR0aW5ncygpO1xuXG5cdFx0dGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbSh1c2VyQ29uZmlnLlRvYXN0Q29yZUNvbmZpZywgdXNlckNvbmZpZ0Jhc2UuVG9hc3RDb3JlQ29uZmlnKTsgLy8gdGhpcyB3aWxsIG1ha2Ugc3VyZSB0aGF0IG9iamVjdCBoYXMgcmlnaHQgcHJvcGVydGllc1xuXG5cdFx0dXNlckNvbmZpZy5Ub2FzdENvcmVDb25maWcgPSB1c2VyQ29uZmlnQmFzZS5Ub2FzdENvcmVDb25maWc7XG5cdFx0Ly8gZW5kcmVnaW9uXG5cblx0XHQvLyByZWdpb24gKioqIGF1dGhvciBkZWZhdWx0IGNvbmZpZyB2YWx1ZXMgKGlmIHRoZXJlIGlzIG5vIHVzZXIgaW5wdXQpICoqKlxuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5CdXR0b25Qb3NpdGlvbiAgICAgICAgICAgID0gJ3JpZ2h0Jztcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuVGV4dFBvc2l0aW9uICAgICAgICAgICAgICA9ICdsZWZ0Jztcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuVG9hc3RQb3NpdGlvbiAgICAgICAgICAgICA9IFRvYXN0UG9zaXRpb25FbnVtLlRPUF9SSUdIVDtcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuUHJvZ3Jlc3NCYXIgICAgICAgICAgICAgICA9IFRvYXN0UHJvZ3Jlc3NCYXJFbnVtLklOQ1JFQVNFO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5Ub2FzdFVzZXJWaWV3VHlwZSAgICAgICAgID0gVG9hc3RVc2VyVmlld1R5cGVFbnVtLlNUQU5EQVJEO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5BdXRvQ2xvc2VEZWxheSAgICAgICAgICAgID0gMjUwMDtcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuRGlzYWJsZUljb24gICAgICAgICAgICAgICA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5BbGxvd0hUTUxNZXNzYWdlICAgICAgICAgID0gdHJ1ZTtcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuTGF5b3V0VHlwZSAgICAgICAgICAgICAgICA9IERpYWxvZ0xheW91dERpc3BsYXkuTk9ORTtcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5HbG9iYWxTZXR0aW5ncy5BbGxvd2VkTm90aWZpY2F0aW9uc0F0T25jZSA9IDU7XG5cblx0XHQvLyBlbmRyZWdpb25cblxuXHRcdC8vIHJlZ2lvbiAqKiogUHJvZHVjdGlvbiBzZXR1cCAqKipcblxuXHRcdHRoaXMuc2V0UmVzZXRHbG9iYWxUb2FzdENvbmZpZygpO1xuXHRcdHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLCB0aGlzLnByb2R1Y3Rpb25Db25maWcuVG9hc3RDb3JlQ29uZmlnKTtcblx0XHR0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHRoaXMudXNlckNvbmZpZy5Ub2FzdENvcmVDb25maWcsIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5Ub2FzdENvcmVDb25maWcpO1xuXHRcdC8vIGVuZHJlZ2lvblxuXG5cblx0fVxuXG5cdHNldFJlc2V0R2xvYmFsVG9hc3RDb25maWcoZ2xvYmFsVG9hc3RDb25maWc/OiBUb2FzdE5vdGlmaWNhdGlvbkludGVyZmFjZS5JR2xvYmFsVG9hc3RTZXR0aW5ncyk6IHZvaWQge1xuXHRcdHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odGhpcy5hdXRob3JDb25maWcuR2xvYmFsU2V0dGluZ3MsIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5HbG9iYWxTZXR0aW5ncyk7XG5cdFx0dGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShnbG9iYWxUb2FzdENvbmZpZyA/IGdsb2JhbFRvYXN0Q29uZmlnIDogdGhpcy51c2VyQ29uZmlnLkdsb2JhbFNldHRpbmdzLCB0aGlzLnByb2R1Y3Rpb25Db25maWcuR2xvYmFsU2V0dGluZ3MpO1xuXHR9XG59XG4iXX0=