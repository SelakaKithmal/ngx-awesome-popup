import { Inject, Injectable } from "@angular/core";
import { DialogLayoutDisplay } from "../../../core/enums";
import { GlobalClass } from "../../../core/global";
import { ToastNotificationClass, ToastPositionEnum, ToastProgressBarEnum, ToastUserViewTypeEnum, } from "./model";
import * as i0 from "@angular/core";
export class ToastNotificationConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new ToastNotificationClass.Settings();
        this.productionConfig = new ToastNotificationClass.Settings();
        this.dataControl = new GlobalClass.DataControl();
        // region *** confirmBox userConfig (user input app-module) ***
        const userConfigBase = new ToastNotificationClass.Settings();
        this.dataControl.copyValuesFrom(userConfig.ToastCoreConfig, userConfigBase.ToastCoreConfig); // this will make sure that object has right properties
        userConfig.ToastCoreConfig = userConfigBase.ToastCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.ToastCoreConfig.ButtonPosition = "right";
        this.authorConfig.ToastCoreConfig.TextPosition = "left";
        this.authorConfig.ToastCoreConfig.ToastPosition =
            ToastPositionEnum.TOP_RIGHT;
        this.authorConfig.ToastCoreConfig.ProgressBar =
            ToastProgressBarEnum.INCREASE;
        this.authorConfig.ToastCoreConfig.ToastUserViewType =
            ToastUserViewTypeEnum.SIMPLE;
        this.authorConfig.ToastCoreConfig.AutoCloseDelay = 2500;
        this.authorConfig.ToastCoreConfig.DisableIcon = false;
        this.authorConfig.ToastCoreConfig.AllowHTMLMessage = true;
        this.authorConfig.ToastCoreConfig.LayoutType = DialogLayoutDisplay.NONE;
        this.authorConfig.GlobalSettings.AllowedNotificationsAtOnce = 5;
        // endregion
        // region *** Production setup ***
        this.setResetGlobalToastConfig();
        this.dataControl.copyValuesFrom(this.authorConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        this.dataControl.copyValuesFrom(this.userConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);
        // endregion
    }
    setResetGlobalToastConfig(globalToastConfig) {
        this.dataControl.copyValuesFrom(this.authorConfig.GlobalSettings, this.productionConfig.GlobalSettings);
        this.dataControl.copyValuesFrom(globalToastConfig ? globalToastConfig : this.userConfig.GlobalSettings, this.productionConfig.GlobalSettings);
    }
}
ToastNotificationConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastNotificationConfigService_Factory() { return new ToastNotificationConfigService(i0.ɵɵinject("toastNotificationConfig")); }, token: ToastNotificationConfigService, providedIn: "root" });
ToastNotificationConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
ToastNotificationConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ["toastNotificationConfig",] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmd4LWF3ZXNvbWUtcG9wdXAvdHlwZXMvdG9hc3Qtbm90aWZpY2F0aW9uL2NvcmUvdG9hc3Qtbm90aWZpY2F0aW9uLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQ0wsc0JBQXNCLEVBRXRCLGlCQUFpQixFQUNqQixvQkFBb0IsRUFDcEIscUJBQXFCLEdBQ3RCLE1BQU0sU0FBUyxDQUFDOztBQUtqQixNQUFNLE9BQU8sOEJBQThCO0lBS3pDLFlBRVUsYUFBc0UsRUFBRTtRQUF4RSxlQUFVLEdBQVYsVUFBVSxDQUE4RDtRQU5sRixpQkFBWSxHQUE0RCxJQUFJLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzlHLHFCQUFnQixHQUE0RCxJQUFJLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFHLGdCQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFNbEQsK0RBQStEO1FBQy9ELE1BQU0sY0FBYyxHQUFHLElBQUksc0JBQXNCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQzdCLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGNBQWMsQ0FBQyxlQUFlLENBQy9CLENBQUMsQ0FBQyx1REFBdUQ7UUFFMUQsVUFBVSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDO1FBQzVELFlBQVk7UUFFWiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQztRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO1FBQ3hELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGFBQWE7WUFDN0MsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFdBQVc7WUFDM0Msb0JBQW9CLENBQUMsUUFBUSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGlCQUFpQjtZQUNqRCxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVoRSxZQUFZO1FBRVosa0NBQWtDO1FBRWxDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FDdEMsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FDdEMsQ0FBQztRQUNGLFlBQVk7SUFDZCxDQUFDO0lBRUQseUJBQXlCLENBQ3ZCLGlCQUFtRTtRQUVuRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQ3JDLENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FDN0IsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFDdEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FDckMsQ0FBQztJQUNKLENBQUM7Ozs7WUFqRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7NENBT0ksTUFBTSxTQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEaWFsb2dMYXlvdXREaXNwbGF5IH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW51bXNcIjtcbmltcG9ydCB7IEdsb2JhbENsYXNzIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZ2xvYmFsXCI7XG5pbXBvcnQge1xuICBUb2FzdE5vdGlmaWNhdGlvbkNsYXNzLFxuICBUb2FzdE5vdGlmaWNhdGlvbkludGVyZmFjZSxcbiAgVG9hc3RQb3NpdGlvbkVudW0sXG4gIFRvYXN0UHJvZ3Jlc3NCYXJFbnVtLFxuICBUb2FzdFVzZXJWaWV3VHlwZUVudW0sXG59IGZyb20gXCIuL21vZGVsXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogXCJyb290XCIsXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnU2VydmljZSB7XG4gIGF1dGhvckNvbmZpZzogVG9hc3ROb3RpZmljYXRpb25JbnRlcmZhY2UuSVRvYXN0Tm90aWZpY2F0aW9uVXNlckNvbmZpZyA9IG5ldyBUb2FzdE5vdGlmaWNhdGlvbkNsYXNzLlNldHRpbmdzKCk7XG4gIHByb2R1Y3Rpb25Db25maWc6IFRvYXN0Tm90aWZpY2F0aW9uSW50ZXJmYWNlLklUb2FzdE5vdGlmaWNhdGlvblVzZXJDb25maWcgPSBuZXcgVG9hc3ROb3RpZmljYXRpb25DbGFzcy5TZXR0aW5ncygpO1xuICBwcml2YXRlIGRhdGFDb250cm9sID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChcInRvYXN0Tm90aWZpY2F0aW9uQ29uZmlnXCIpXG4gICAgcHJpdmF0ZSB1c2VyQ29uZmlnOiBUb2FzdE5vdGlmaWNhdGlvbkludGVyZmFjZS5JVG9hc3ROb3RpZmljYXRpb25Vc2VyQ29uZmlnID0ge31cbiAgKSB7XG4gICAgLy8gcmVnaW9uICoqKiBjb25maXJtQm94IHVzZXJDb25maWcgKHVzZXIgaW5wdXQgYXBwLW1vZHVsZSkgKioqXG4gICAgY29uc3QgdXNlckNvbmZpZ0Jhc2UgPSBuZXcgVG9hc3ROb3RpZmljYXRpb25DbGFzcy5TZXR0aW5ncygpO1xuXG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgIHVzZXJDb25maWcuVG9hc3RDb3JlQ29uZmlnLFxuICAgICAgdXNlckNvbmZpZ0Jhc2UuVG9hc3RDb3JlQ29uZmlnXG4gICAgKTsgLy8gdGhpcyB3aWxsIG1ha2Ugc3VyZSB0aGF0IG9iamVjdCBoYXMgcmlnaHQgcHJvcGVydGllc1xuXG4gICAgdXNlckNvbmZpZy5Ub2FzdENvcmVDb25maWcgPSB1c2VyQ29uZmlnQmFzZS5Ub2FzdENvcmVDb25maWc7XG4gICAgLy8gZW5kcmVnaW9uXG5cbiAgICAvLyByZWdpb24gKioqIGF1dGhvciBkZWZhdWx0IGNvbmZpZyB2YWx1ZXMgKGlmIHRoZXJlIGlzIG5vIHVzZXIgaW5wdXQpICoqKlxuICAgIHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5CdXR0b25Qb3NpdGlvbiA9IFwicmlnaHRcIjtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuVGV4dFBvc2l0aW9uID0gXCJsZWZ0XCI7XG4gICAgdGhpcy5hdXRob3JDb25maWcuVG9hc3RDb3JlQ29uZmlnLlRvYXN0UG9zaXRpb24gPVxuICAgICAgVG9hc3RQb3NpdGlvbkVudW0uVE9QX1JJR0hUO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5Qcm9ncmVzc0JhciA9XG4gICAgICBUb2FzdFByb2dyZXNzQmFyRW51bS5JTkNSRUFTRTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuVG9hc3RVc2VyVmlld1R5cGUgPVxuICAgICAgVG9hc3RVc2VyVmlld1R5cGVFbnVtLlNJTVBMRTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuQXV0b0Nsb3NlRGVsYXkgPSAyNTAwO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5EaXNhYmxlSWNvbiA9IGZhbHNlO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLlRvYXN0Q29yZUNvbmZpZy5BbGxvd0hUTUxNZXNzYWdlID0gdHJ1ZTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcuTGF5b3V0VHlwZSA9IERpYWxvZ0xheW91dERpc3BsYXkuTk9ORTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5HbG9iYWxTZXR0aW5ncy5BbGxvd2VkTm90aWZpY2F0aW9uc0F0T25jZSA9IDU7XG5cbiAgICAvLyBlbmRyZWdpb25cblxuICAgIC8vIHJlZ2lvbiAqKiogUHJvZHVjdGlvbiBzZXR1cCAqKipcblxuICAgIHRoaXMuc2V0UmVzZXRHbG9iYWxUb2FzdENvbmZpZygpO1xuICAgIHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20oXG4gICAgICB0aGlzLmF1dGhvckNvbmZpZy5Ub2FzdENvcmVDb25maWcsXG4gICAgICB0aGlzLnByb2R1Y3Rpb25Db25maWcuVG9hc3RDb3JlQ29uZmlnXG4gICAgKTtcbiAgICB0aGlzLmRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdGhpcy51c2VyQ29uZmlnLlRvYXN0Q29yZUNvbmZpZyxcbiAgICAgIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5Ub2FzdENvcmVDb25maWdcbiAgICApO1xuICAgIC8vIGVuZHJlZ2lvblxuICB9XG5cbiAgc2V0UmVzZXRHbG9iYWxUb2FzdENvbmZpZyhcbiAgICBnbG9iYWxUb2FzdENvbmZpZz86IFRvYXN0Tm90aWZpY2F0aW9uSW50ZXJmYWNlLklHbG9iYWxUb2FzdFNldHRpbmdzXG4gICk6IHZvaWQge1xuICAgIHRoaXMuZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20oXG4gICAgICB0aGlzLmF1dGhvckNvbmZpZy5HbG9iYWxTZXR0aW5ncyxcbiAgICAgIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5HbG9iYWxTZXR0aW5nc1xuICAgICk7XG4gICAgdGhpcy5kYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShcbiAgICAgIGdsb2JhbFRvYXN0Q29uZmlnID8gZ2xvYmFsVG9hc3RDb25maWcgOiB0aGlzLnVzZXJDb25maWcuR2xvYmFsU2V0dGluZ3MsXG4gICAgICB0aGlzLnByb2R1Y3Rpb25Db25maWcuR2xvYmFsU2V0dGluZ3NcbiAgICApO1xuICB9XG59XG4iXX0=