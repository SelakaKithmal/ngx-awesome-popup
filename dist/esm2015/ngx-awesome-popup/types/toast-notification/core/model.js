import { Subject } from "rxjs";
import { map, take } from "rxjs/operators";
import { GlobalClass } from "../../../core/global";
import { ServiceLocator } from "../../../locator.service";
import { ToastNotificationConfigService } from "./toast-notification-config.service";
import { ToastNotificationService } from "./toast-notification.service";
export var ToastNotificationClass;
(function (ToastNotificationClass) {
    // region *** Public ***
    class ToastNotificationInitializer {
        constructor() {
            this.toastNotificationCarrier = new ToastNotificationClass.ToastNotificationCarrier();
        }
        openToastNotification$() {
            return this.toastNotificationCarrier.openToastNotification$().pipe(map((resp) => {
                const basicToastNotificationResponse = new ToastNotificationResponse();
                const dataControl = new GlobalClass.DataControl();
                dataControl.copyValuesFrom(resp, basicToastNotificationResponse);
                return basicToastNotificationResponse;
            }), take(1));
        }
        setButtons(_Buttons) {
            this.toastNotificationCarrier.setButtons(_Buttons);
        }
        setConfig(_ToastNotificationConfig) {
            this.toastNotificationCarrier.setConfig(_ToastNotificationConfig);
        }
        setDispatch(_Title, _Message = null) {
            this.toastNotificationCarrier.setTitle(_Title);
            this.toastNotificationCarrier.setMessage(_Message);
        }
        setTitle(_Title) {
            this.toastNotificationCarrier.setTitle(_Title);
        }
        setMessage(_Message) {
            this.toastNotificationCarrier.setMessage(_Message);
        }
        setButtonLabels(_Confirm, _Decline) {
            this.toastNotificationCarrier.setButtonLabels(_Confirm, _Decline);
        }
    }
    ToastNotificationClass.ToastNotificationInitializer = ToastNotificationInitializer;
    class ToastNotificationResponse extends GlobalClass.DataControl {
        constructor() {
            super();
            // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
            this.Success = null;
            this.ClickedButtonID = null;
        }
        setSuccess(_IsSuccess) {
            this.Success = _IsSuccess;
        }
        setClickedButtonID(_ClickedButtonID) {
            this.ClickedButtonID = _ClickedButtonID;
        }
    }
    ToastNotificationClass.ToastNotificationResponse = ToastNotificationResponse;
    class ToastNotificationEventsController {
        constructor(EntityUniqueID) {
            this.EntityUniqueID = EntityUniqueID;
            this._afterClosed = new Subject();
            this.afterClosed$ = this._afterClosed.asObservable();
            this._onButtonClick = new Subject();
            this.onButtonClick$ = this._onButtonClick.asObservable();
            this._buttonList = new Subject();
            this.buttonList$ = this._buttonList.asObservable();
        }
        close(_Response) {
            const response = _Response ? _Response : this.defaultResponse;
            this._afterClosed.next(response);
        }
        onButtonClick(_Button) {
            this.defaultResponse.setClickedButtonID(_Button.ID);
            this._onButtonClick.next(_Button);
        }
        setButtonList(_ButtonList) {
            this._buttonList.next(_ButtonList);
        }
        setDefaultResponse(_Response) {
            this.defaultResponse = _Response;
        }
    }
    ToastNotificationClass.ToastNotificationEventsController = ToastNotificationEventsController;
    // endregion
    class ToastNotificationDefaultResponse extends ToastNotificationResponse {
        constructor() {
            super();
            this.toastNotificationBelonging = null;
        }
        setBelonging(_ToastNotificationBelonging) {
            this.toastNotificationBelonging = _ToastNotificationBelonging;
        }
    }
    ToastNotificationClass.ToastNotificationDefaultResponse = ToastNotificationDefaultResponse;
    class ToastNotificationCarrier {
        constructor() {
            this.toastNotificationBelonging = new ToastNotificationClass.ToastNotificationBelonging();
        }
        setButtons(_Buttons) {
            if (_Buttons.length) {
                this.toastNotificationBelonging.Buttons = _Buttons;
            }
        }
        setTitle(_Title) {
            this.toastNotificationBelonging.Dispatch.Title = _Title;
        }
        setMessage(_Message) {
            this.toastNotificationBelonging.Dispatch.Message = _Message;
        }
        setButtonLabels(_Confirm, _Decline) {
            this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel = _Confirm;
            this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel = _Decline;
        }
        setConfig(_ToastNotificationBelonging) {
            // region *** local UserConfig (defined on place where dialog is called) ***
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(_ToastNotificationBelonging, this.toastNotificationBelonging.ToastCoreConfig);
            // endregion
        }
        openToastNotification$() {
            if (!this.toastNotificationBelonging.Dispatch.Title &&
                !this.toastNotificationBelonging.Dispatch.Message) {
                throw Error("Toast notification can not be without both message and title.");
            }
            const service = ServiceLocator.injector.get(ToastNotificationService);
            return service.openToast$(this.toastNotificationBelonging);
        }
    }
    ToastNotificationClass.ToastNotificationCarrier = ToastNotificationCarrier;
    class GlobalToastSettings {
        constructor() {
            this.AllowedNotificationsAtOnce = null;
        }
    }
    ToastNotificationClass.GlobalToastSettings = GlobalToastSettings;
    class ResetToastGlobalSettings {
        constructor(globalToastConfig) {
            const globalToastConfigService = ServiceLocator.injector.get(ToastNotificationConfigService);
            if (globalToastConfigService) {
                globalToastConfigService.setResetGlobalToastConfig(globalToastConfig);
            }
            else {
                globalToastConfigService.setResetGlobalToastConfig();
            }
        }
    }
    ToastNotificationClass.ResetToastGlobalSettings = ResetToastGlobalSettings;
    class Settings {
        constructor() {
            this.Buttons = [];
            this.ToastCoreConfig = new ToastCoreConfig();
            this.Dispatch = new GlobalClass.Dispatch();
            this.GlobalSettings = new GlobalToastSettings();
        }
    }
    ToastNotificationClass.Settings = Settings;
    class ToastCoreConfig {
        constructor() {
            this.ToastPosition = null;
            this.ProgressBar = null;
            this.ToastUserViewType = null;
            this.OpenInElementID = null;
            this.ButtonPosition = null;
            this.TextPosition = null;
            this.LayoutType = null;
            this.Dispatch = null;
            this.ConfirmLabel = null;
            this.DeclineLabel = null;
            this.AutoCloseDelay = null;
            this.DisableIcon = null;
            this.AllowHTMLMessage = null;
        }
    }
    ToastNotificationClass.ToastCoreConfig = ToastCoreConfig;
    class ToastNotificationBelonging extends ToastNotificationClass.Settings {
        constructor() {
            super();
            this.EntityUniqueID = "T" + Math.random().toString(36).substr(2, 9);
            this.EventsController = new ToastNotificationEventsController(this.EntityUniqueID);
            const toastNotificationConfigurator = ServiceLocator.injector.get(ToastNotificationConfigService);
            const baseSettings = new ToastNotificationClass.Settings();
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(toastNotificationConfigurator.productionConfig.ToastCoreConfig, baseSettings.ToastCoreConfig);
            this.ToastCoreConfig = baseSettings.ToastCoreConfig;
            this.Buttons = toastNotificationConfigurator.productionConfig.Buttons.slice();
        }
    }
    ToastNotificationClass.ToastNotificationBelonging = ToastNotificationBelonging;
})(ToastNotificationClass || (ToastNotificationClass = {}));
export var ToastProgressBarEnum;
(function (ToastProgressBarEnum) {
    ToastProgressBarEnum[ToastProgressBarEnum["NONE"] = 0] = "NONE";
    ToastProgressBarEnum[ToastProgressBarEnum["INCREASE"] = 1] = "INCREASE";
    ToastProgressBarEnum[ToastProgressBarEnum["DECREASE"] = 2] = "DECREASE";
})(ToastProgressBarEnum || (ToastProgressBarEnum = {}));
export var ToastPositionEnum;
(function (ToastPositionEnum) {
    ToastPositionEnum["TOP_LEFT"] = "top-left";
    ToastPositionEnum["TOP_CENTER"] = "top-center";
    ToastPositionEnum["TOP_RIGHT"] = "top-right";
    ToastPositionEnum["TOP_FULL_WIDTH"] = "top-fullwidth";
    ToastPositionEnum["BOTTOM_LEFT"] = "bottom-left";
    ToastPositionEnum["BOTTOM_CENTER"] = "bottom-center";
    ToastPositionEnum["BOTTOM_RIGHT"] = "bottom-right";
    ToastPositionEnum["BOTTOM_FULL_WIDTH"] = "bottom-fullwidth";
})(ToastPositionEnum || (ToastPositionEnum = {}));
export var ToastUserViewTypeEnum;
(function (ToastUserViewTypeEnum) {
    ToastUserViewTypeEnum["SIMPLE"] = "simple";
    ToastUserViewTypeEnum["STANDARD"] = "standard";
})(ToastUserViewTypeEnum || (ToastUserViewTypeEnum = {}));
//# sourceMappingURL=data:application/json;base64,