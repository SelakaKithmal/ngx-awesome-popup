import { Subject } from 'rxjs';
import { ServiceLocator } from '../../../locator.service';
import { DialogConfigService } from './dialog-config.service';
import { map } from 'rxjs/operators';
import { GlobalClass } from '../../../core/global';
import { DialogService } from './dialog.service';
export var DialogClass;
(function (DialogClass) {
    // region *** Public ***
    class DialogInitializer {
        constructor(component) {
            this.component = component;
            this.dialogCarrier = new DialogClass.DialogCarrier();
            this.dialogCarrier.setComponent(this.component);
        }
        /** Generic method accept expected payload from dynamic child component.*/
        openDialog$() {
            return this.dialogCarrier.openDialog$().pipe(map(resp => {
                const basicDialogResponse = new DialogResponse();
                const dataControl = new GlobalClass.DataControl();
                dataControl.copyValuesFrom(resp, basicDialogResponse);
                return basicDialogResponse;
            }));
        }
        /** It accepts list of custom buttons */
        setButtons(_Buttons) {
            this.dialogCarrier.setButtons(_Buttons);
        }
        setCustomData(_CustomData) {
            this.dialogCarrier.setCustomData(_CustomData);
        }
        setConfig(_DialogConfig) {
            this.dialogCarrier.setConfig(_DialogConfig);
        }
    }
    DialogClass.DialogInitializer = DialogInitializer;
    class DialogResponse extends GlobalClass.DataControl {
        constructor() {
            super();
            // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
            this.Payload = null;
            this.Success = null;
            this.ClickedButtonID = null;
        }
        /**
         * @ignore
         */
        setPayload(_Payload) {
            this.Payload = _Payload;
        }
        /**
         * @ignore
         */
        setSuccess(_IsSuccess) {
            this.Success = _IsSuccess;
        }
        /**
         * @ignore
         */
        setClickedButtonID(_ClickedButtonID) {
            this.ClickedButtonID = _ClickedButtonID;
        }
    }
    DialogClass.DialogResponse = DialogResponse;
    class DialogEventsController {
        constructor(EntityUniqueID) {
            this.EntityUniqueID = EntityUniqueID;
            this._afterClosed = new Subject();
            this.afterClosed$ = this._afterClosed.asObservable();
            this._afterLoader = new Subject();
            this.afterLoader$ = this._afterLoader.asObservable();
            this._onButtonClick = new Subject();
            this.onButtonClick$ = this._onButtonClick.asObservable();
            this._buttonList = new Subject();
            this.buttonList$ = this._buttonList.asObservable();
        }
        close(_Response) {
            const response = _Response ? _Response : this.defaultResponse;
            this._afterClosed.next(response);
        }
        onButtonClick(_Button) {
            this.defaultResponse.setClickedButtonID(_Button.ID);
            this._onButtonClick.next(_Button);
        }
        setButtonList(_ButtonList) {
            this._buttonList.next(_ButtonList);
        }
        closeLoader() {
            setTimeout(() => {
                this._afterLoader.next(this.EntityUniqueID);
            }, 0);
        }
        setDefaultResponse(_Response) {
            this.defaultResponse = _Response;
        }
    }
    DialogClass.DialogEventsController = DialogEventsController;
    // endregion
    class DialogDefaultResponse extends DialogResponse {
        constructor() {
            super();
            this.DialogBelonging = null;
        }
        setBelonging(_DialogBelonging) {
            this.DialogBelonging = _DialogBelonging;
        }
    }
    DialogClass.DialogDefaultResponse = DialogDefaultResponse;
    class DialogCarrier {
        constructor() {
            this.dialogBelonging = new DialogBelonging();
        }
        setComponent(_Component) {
            this.component = _Component;
        }
        setButtons(_Buttons) {
            if (_Buttons.length) {
                this.dialogBelonging.Buttons = _Buttons;
            }
        }
        setCustomData(_CustomData) {
            this.dialogBelonging.CustomData = _CustomData;
        }
        setConfig(_DialogConfig) {
            // region *** local UserConfig (defined on place where dialog is called) ***
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(_DialogConfig, this.dialogBelonging.DialogCoreConfig);
            // endregion
        }
        openDialog$() {
            const service = ServiceLocator.injector.get(DialogService);
            const dialogController = service.open(this.component, this.dialogBelonging);
            return dialogController.afterClosed$;
        }
    }
    DialogClass.DialogCarrier = DialogCarrier;
    class DialogCoreConfig {
        constructor() {
            this.Width = null;
            this.Height = null;
            this.ButtonPosition = null;
            this.LayoutType = null;
            this.DisplayLoader = null;
            this.LoaderComponent = null;
        }
    }
    DialogClass.DialogCoreConfig = DialogCoreConfig;
    class DialogSettings {
        constructor() {
            this.Buttons = [];
            this.DialogCoreConfig = new DialogCoreConfig();
        }
    }
    DialogClass.DialogSettings = DialogSettings;
    class DialogBelonging extends DialogSettings {
        constructor() {
            super();
            /** @internal */
            this.EntityUniqueID = 'D' + Math.random().toString(36).substr(2, 9);
            this.CustomData = null;
            this.EventsController = new DialogEventsController(this.EntityUniqueID);
            const dialogConfigurator = ServiceLocator.injector.get(DialogConfigService);
            const baseSettings = new DialogSettings();
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(dialogConfigurator.productionConfig.DialogCoreConfig, baseSettings.DialogCoreConfig);
            this.DialogCoreConfig = baseSettings.DialogCoreConfig;
            this.Buttons = dialogConfigurator.productionConfig.Buttons.slice();
        }
    }
    DialogClass.DialogBelonging = DialogBelonging;
})(DialogClass || (DialogClass = {}));
//# sourceMappingURL=data:application/json;base64,