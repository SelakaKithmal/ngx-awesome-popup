import { Inject, Injectable } from "@angular/core";
import { DialogLayoutDisplay } from "../../../core/enums";
import { GlobalClass } from "../../../core/global";
import { ConfirmBoxClass } from "./model";
import * as i0 from "@angular/core";
export class ConfirmBoxConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new ConfirmBoxClass.Settings();
        this.productionConfig = new ConfirmBoxClass.Settings();
        // region *** confirmBox userConfig (user input app-module) ***
        const userConfigBase = new ConfirmBoxClass.Settings();
        const dataControl = new GlobalClass.DataControl();
        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, userConfigBase.ConfirmBoxCoreConfig); // this will make sure that object has right properties
        userConfig.ConfirmBoxCoreConfig = userConfigBase.ConfirmBoxCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.ConfirmBoxCoreConfig.Width = "auto";
        this.authorConfig.ConfirmBoxCoreConfig.Height = "auto";
        this.authorConfig.ConfirmBoxCoreConfig.ButtonPosition = "center";
        this.authorConfig.ConfirmBoxCoreConfig.ConfirmLabel = "Confirm";
        this.authorConfig.ConfirmBoxCoreConfig.DeclineLabel = "Decline";
        this.authorConfig.ConfirmBoxCoreConfig.DisableIcon = false;
        this.authorConfig.ConfirmBoxCoreConfig.AllowHTMLMessage = false;
        this.authorConfig.ConfirmBoxCoreConfig.LayoutType =
            DialogLayoutDisplay.NONE;
        // endregion
        // region *** Production setup ***
        dataControl.copyValuesFrom(this.authorConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);
        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);
        // endregion
    }
}
ConfirmBoxConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfirmBoxConfigService_Factory() { return new ConfirmBoxConfigService(i0.ɵɵinject("confirmBoxConfig")); }, token: ConfirmBoxConfigService, providedIn: "root" });
ConfirmBoxConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
ConfirmBoxConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ["confirmBoxConfig",] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1ib3gtY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZ3gtYXdlc29tZS1wb3B1cC90eXBlcy9jb25maXJtLWJveC9jb3JlL2NvbmZpcm0tYm94LWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUF1QixNQUFNLFNBQVMsQ0FBQzs7QUFLL0QsTUFBTSxPQUFPLHVCQUF1QjtJQUlsQyxZQUVVLGFBQXdELEVBQUU7UUFBMUQsZUFBVSxHQUFWLFVBQVUsQ0FBZ0Q7UUFMcEUsaUJBQVksR0FBOEMsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekYscUJBQWdCLEdBQThDLElBQUksZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBTTNGLCtEQUErRDtRQUMvRCxNQUFNLGNBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN0RCxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsRCxXQUFXLENBQUMsY0FBYyxDQUN4QixVQUFVLENBQUMsb0JBQW9CLEVBQy9CLGNBQWMsQ0FBQyxvQkFBb0IsQ0FDcEMsQ0FBQyxDQUFDLHVEQUF1RDtRQUMxRCxVQUFVLENBQUMsb0JBQW9CLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUFDO1FBQ3RFLFlBQVk7UUFFWiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN2RCxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDakUsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDM0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVO1lBQy9DLG1CQUFtQixDQUFDLElBQUksQ0FBQztRQUUzQixZQUFZO1FBRVosa0NBQWtDO1FBQ2xDLFdBQVcsQ0FBQyxjQUFjLENBQ3hCLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FDM0MsQ0FBQztRQUNGLFdBQVcsQ0FBQyxjQUFjLENBQ3hCLFVBQVUsQ0FBQyxvQkFBb0IsRUFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUMzQyxDQUFDO1FBQ0YsWUFBWTtJQUNkLENBQUM7Ozs7WUE1Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7NENBTUksTUFBTSxTQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEaWFsb2dMYXlvdXREaXNwbGF5IH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZW51bXNcIjtcbmltcG9ydCB7IEdsb2JhbENsYXNzIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvZ2xvYmFsXCI7XG5pbXBvcnQgeyBDb25maXJtQm94Q2xhc3MsIENvbmZpcm1Cb3hJbnRlcmZhY2UgfSBmcm9tIFwiLi9tb2RlbFwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46IFwicm9vdFwiLFxufSlcbmV4cG9ydCBjbGFzcyBDb25maXJtQm94Q29uZmlnU2VydmljZSB7XG4gIGF1dGhvckNvbmZpZzogQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveFVzZXJDb25maWcgPSBuZXcgQ29uZmlybUJveENsYXNzLlNldHRpbmdzKCk7XG4gIHByb2R1Y3Rpb25Db25maWc6IENvbmZpcm1Cb3hJbnRlcmZhY2UuSUNvbmZpcm1Cb3hVc2VyQ29uZmlnID0gbmV3IENvbmZpcm1Cb3hDbGFzcy5TZXR0aW5ncygpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoXCJjb25maXJtQm94Q29uZmlnXCIpXG4gICAgcHJpdmF0ZSB1c2VyQ29uZmlnOiBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94VXNlckNvbmZpZyA9IHt9XG4gICkge1xuICAgIC8vIHJlZ2lvbiAqKiogY29uZmlybUJveCB1c2VyQ29uZmlnICh1c2VyIGlucHV0IGFwcC1tb2R1bGUpICoqKlxuICAgIGNvbnN0IHVzZXJDb25maWdCYXNlID0gbmV3IENvbmZpcm1Cb3hDbGFzcy5TZXR0aW5ncygpO1xuICAgIGNvbnN0IGRhdGFDb250cm9sID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG4gICAgZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20oXG4gICAgICB1c2VyQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLFxuICAgICAgdXNlckNvbmZpZ0Jhc2UuQ29uZmlybUJveENvcmVDb25maWdcbiAgICApOyAvLyB0aGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgb2JqZWN0IGhhcyByaWdodCBwcm9wZXJ0aWVzXG4gICAgdXNlckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZyA9IHVzZXJDb25maWdCYXNlLkNvbmZpcm1Cb3hDb3JlQ29uZmlnO1xuICAgIC8vIGVuZHJlZ2lvblxuXG4gICAgLy8gcmVnaW9uICoqKiBhdXRob3IgZGVmYXVsdCBjb25maWcgdmFsdWVzIChpZiB0aGVyZSBpcyBubyB1c2VyIGlucHV0KSAqKipcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5XaWR0aCA9IFwiYXV0b1wiO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkhlaWdodCA9IFwiYXV0b1wiO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkJ1dHRvblBvc2l0aW9uID0gXCJjZW50ZXJcIjtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5Db25maXJtTGFiZWwgPSBcIkNvbmZpcm1cIjtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5EZWNsaW5lTGFiZWwgPSBcIkRlY2xpbmVcIjtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5EaXNhYmxlSWNvbiA9IGZhbHNlO1xuICAgIHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkFsbG93SFRNTE1lc3NhZ2UgPSBmYWxzZTtcbiAgICB0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5MYXlvdXRUeXBlID1cbiAgICAgIERpYWxvZ0xheW91dERpc3BsYXkuTk9ORTtcblxuICAgIC8vIGVuZHJlZ2lvblxuXG4gICAgLy8gcmVnaW9uICoqKiBQcm9kdWN0aW9uIHNldHVwICoqKlxuICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdGhpcy5hdXRob3JDb25maWcuQ29uZmlybUJveENvcmVDb25maWcsXG4gICAgICB0aGlzLnByb2R1Y3Rpb25Db25maWcuQ29uZmlybUJveENvcmVDb25maWdcbiAgICApO1xuICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKFxuICAgICAgdXNlckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZyxcbiAgICAgIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZ1xuICAgICk7XG4gICAgLy8gZW5kcmVnaW9uXG4gIH1cbn1cbiJdfQ==