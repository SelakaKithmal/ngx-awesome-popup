import { Inject, Injectable } from '@angular/core';
import { DialogLayoutDisplay } from '../../../core/enums';
import { GlobalClass } from '../../../core/global';
import { ConfirmBoxClass } from './model';
import * as i0 from "@angular/core";
export class ConfirmBoxConfigService {
    constructor(userConfig = {}) {
        this.userConfig = userConfig;
        this.authorConfig = new ConfirmBoxClass.Settings();
        this.productionConfig = new ConfirmBoxClass.Settings();
        // region *** confirmBox userConfig (user input app-module) ***
        const userConfigBase = new ConfirmBoxClass.Settings();
        const dataControl = new GlobalClass.DataControl();
        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, userConfigBase.ConfirmBoxCoreConfig); // this will make sure that object has right properties
        userConfig.ConfirmBoxCoreConfig = userConfigBase.ConfirmBoxCoreConfig;
        // endregion
        // region *** author default config values (if there is no user input) ***
        this.authorConfig.ConfirmBoxCoreConfig.Width = 'auto';
        this.authorConfig.ConfirmBoxCoreConfig.Height = 'auto';
        this.authorConfig.ConfirmBoxCoreConfig.ButtonPosition = 'center';
        this.authorConfig.ConfirmBoxCoreConfig.ConfirmLabel = 'Confirm';
        this.authorConfig.ConfirmBoxCoreConfig.DeclineLabel = 'Decline';
        this.authorConfig.ConfirmBoxCoreConfig.DisableIcon = false;
        this.authorConfig.ConfirmBoxCoreConfig.AllowHTMLMessage = false;
        this.authorConfig.ConfirmBoxCoreConfig.LayoutType = DialogLayoutDisplay.NONE;
        // endregion
        // region *** Production setup ***
        dataControl.copyValuesFrom(this.authorConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);
        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);
        // endregion
    }
}
ConfirmBoxConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfirmBoxConfigService_Factory() { return new ConfirmBoxConfigService(i0.ɵɵinject("confirmBoxConfig")); }, token: ConfirmBoxConfigService, providedIn: "root" });
ConfirmBoxConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ConfirmBoxConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['confirmBoxConfig',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1ib3gtY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZ3gtYXdlc29tZS1wb3B1cC90eXBlcy9jb25maXJtLWJveC9jb3JlL2NvbmZpcm0tYm94LWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsZUFBZSxFQUFzQixNQUFNLFNBQVMsQ0FBQzs7QUFLN0QsTUFBTSxPQUFPLHVCQUF1QjtJQUtuQyxZQUFnRCxhQUF3RCxFQUFFO1FBQTFELGVBQVUsR0FBVixVQUFVLENBQWdEO1FBSDFHLGlCQUFZLEdBQWtELElBQUksZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdGLHFCQUFnQixHQUE4QyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUk1RiwrREFBK0Q7UUFDL0QsTUFBTSxjQUFjLEdBQUcsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEQsTUFBTSxXQUFXLEdBQU0sSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyx1REFBdUQ7UUFDekosVUFBVSxDQUFDLG9CQUFvQixHQUFHLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQztRQUN0RSxZQUFZO1FBRVosMEVBQTBFO1FBQzFFLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsS0FBSyxHQUFjLE1BQU0sQ0FBQztRQUNqRSxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sR0FBYSxNQUFNLENBQUM7UUFDakUsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLEdBQUssUUFBUSxDQUFDO1FBQ25FLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsWUFBWSxHQUFPLFNBQVMsQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLFlBQVksR0FBTyxTQUFTLENBQUM7UUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEdBQVEsS0FBSyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsVUFBVSxHQUFTLG1CQUFtQixDQUFDLElBQUksQ0FBQztRQUVuRixZQUFZO1FBRVosa0NBQWtDO1FBQ2xDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMvRyxXQUFXLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN4RyxZQUFZO0lBRWIsQ0FBQzs7OztZQWxDRCxVQUFVLFNBQUM7Z0JBQ1gsVUFBVSxFQUFFLE1BQU07YUFDbEI7Ozs0Q0FNYSxNQUFNLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEaWFsb2dMYXlvdXREaXNwbGF5fSBmcm9tICcuLi8uLi8uLi9jb3JlL2VudW1zJztcbmltcG9ydCB7R2xvYmFsQ2xhc3N9IGZyb20gJy4uLy4uLy4uL2NvcmUvZ2xvYmFsJztcbmltcG9ydCB7Q29uZmlybUJveENsYXNzLCBDb25maXJtQm94SW50ZXJmYWNlfSBmcm9tICcuL21vZGVsJztcblxuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlybUJveENvbmZpZ1NlcnZpY2Uge1xuXG5cdGF1dGhvckNvbmZpZzogQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveFVzZXJDb25maWcgICAgID0gbmV3IENvbmZpcm1Cb3hDbGFzcy5TZXR0aW5ncygpO1xuXHRwcm9kdWN0aW9uQ29uZmlnOiBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94VXNlckNvbmZpZyA9IG5ldyBDb25maXJtQm94Q2xhc3MuU2V0dGluZ3MoKTtcblxuXHRjb25zdHJ1Y3RvcihASW5qZWN0KCdjb25maXJtQm94Q29uZmlnJykgcHJpdmF0ZSB1c2VyQ29uZmlnOiBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94VXNlckNvbmZpZyA9IHt9KSB7XG5cblx0XHQvLyByZWdpb24gKioqIGNvbmZpcm1Cb3ggdXNlckNvbmZpZyAodXNlciBpbnB1dCBhcHAtbW9kdWxlKSAqKipcblx0XHRjb25zdCB1c2VyQ29uZmlnQmFzZSA9IG5ldyBDb25maXJtQm94Q2xhc3MuU2V0dGluZ3MoKTtcblx0XHRjb25zdCBkYXRhQ29udHJvbCAgICA9IG5ldyBHbG9iYWxDbGFzcy5EYXRhQ29udHJvbCgpO1xuXHRcdGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKHVzZXJDb25maWcuQ29uZmlybUJveENvcmVDb25maWcsIHVzZXJDb25maWdCYXNlLkNvbmZpcm1Cb3hDb3JlQ29uZmlnKTsgLy8gdGhpcyB3aWxsIG1ha2Ugc3VyZSB0aGF0IG9iamVjdCBoYXMgcmlnaHQgcHJvcGVydGllc1xuXHRcdHVzZXJDb25maWcuQ29uZmlybUJveENvcmVDb25maWcgPSB1c2VyQ29uZmlnQmFzZS5Db25maXJtQm94Q29yZUNvbmZpZztcblx0XHQvLyBlbmRyZWdpb25cblxuXHRcdC8vIHJlZ2lvbiAqKiogYXV0aG9yIGRlZmF1bHQgY29uZmlnIHZhbHVlcyAoaWYgdGhlcmUgaXMgbm8gdXNlciBpbnB1dCkgKioqXG5cdFx0dGhpcy5hdXRob3JDb25maWcuQ29uZmlybUJveENvcmVDb25maWcuV2lkdGggICAgICAgICAgICA9ICdhdXRvJztcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5IZWlnaHQgICAgICAgICAgID0gJ2F1dG8nO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkJ1dHRvblBvc2l0aW9uICAgPSAnY2VudGVyJztcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5Db25maXJtTGFiZWwgICAgID0gJ0NvbmZpcm0nO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkRlY2xpbmVMYWJlbCAgICAgPSAnRGVjbGluZSc7XG5cdFx0dGhpcy5hdXRob3JDb25maWcuQ29uZmlybUJveENvcmVDb25maWcuRGlzYWJsZUljb24gICAgICA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0aG9yQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkFsbG93SFRNTE1lc3NhZ2UgPSBmYWxzZTtcblx0XHR0aGlzLmF1dGhvckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZy5MYXlvdXRUeXBlICAgICAgID0gRGlhbG9nTGF5b3V0RGlzcGxheS5OT05FO1xuXG5cdFx0Ly8gZW5kcmVnaW9uXG5cblx0XHQvLyByZWdpb24gKioqIFByb2R1Y3Rpb24gc2V0dXAgKioqXG5cdFx0ZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odGhpcy5hdXRob3JDb25maWcuQ29uZmlybUJveENvcmVDb25maWcsIHRoaXMucHJvZHVjdGlvbkNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZyk7XG5cdFx0ZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20odXNlckNvbmZpZy5Db25maXJtQm94Q29yZUNvbmZpZywgdGhpcy5wcm9kdWN0aW9uQ29uZmlnLkNvbmZpcm1Cb3hDb3JlQ29uZmlnKTtcblx0XHQvLyBlbmRyZWdpb25cblxuXHR9XG59XG4iXX0=