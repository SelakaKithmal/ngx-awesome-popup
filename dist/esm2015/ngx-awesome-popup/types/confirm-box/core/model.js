import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { GlobalClass } from '../../../core/global';
import { ServiceLocator } from '../../../locator.service';
import { ConfirmBoxConfigService } from './confirm-box-config.service';
import { ConfirmBoxService } from './confirm-box-service';
export var ConfirmBoxClass;
(function (ConfirmBoxClass) {
    // region *** Public ***
    class ConfirmBoxInitializer {
        constructor() {
            /** @internal */
            this.confirmBoxCarrier = new ConfirmBoxClass.ConfirmBoxCarrier();
        }
        openConfirmBox$() {
            return this.confirmBoxCarrier.openConfirmBox$().pipe(map(resp => {
                const basicConfirmBoxResponse = new ConfirmBoxResponse();
                const dataControl = new GlobalClass.DataControl();
                dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);
                return basicConfirmBoxResponse;
            }));
        }
        setButtons(_Buttons) {
            this.confirmBoxCarrier.setButtons(_Buttons);
        }
        setConfig(_ConfirmBoxCoreConfig) {
            this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);
        }
        setDispatch(_Title, _Message = null) {
            this.confirmBoxCarrier.setTitle(_Title);
            this.confirmBoxCarrier.setMessage(_Message);
        }
        setTitle(_Title) {
            this.confirmBoxCarrier.setTitle(_Title);
        }
        setMessage(_Message) {
            this.confirmBoxCarrier.setMessage(_Message);
        }
        setButtonLabels(_Confirm, _Decline) {
            this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);
        }
    }
    ConfirmBoxClass.ConfirmBoxInitializer = ConfirmBoxInitializer;
    class ConfirmBoxResponse extends GlobalClass.DataControl {
        constructor() {
            super();
            // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
            this.Success = null;
            this.ClickedButtonID = null;
        }
        setSuccess(_IsSuccess) {
            this.Success = _IsSuccess;
        }
        setClickedButtonID(_ClickedButtonID) {
            this.ClickedButtonID = _ClickedButtonID;
        }
    }
    ConfirmBoxClass.ConfirmBoxResponse = ConfirmBoxResponse;
    class ConfirmBoxEventsController {
        constructor(EntityUniqueID) {
            this.EntityUniqueID = EntityUniqueID;
            this._afterClosed = new Subject();
            this.afterClosed$ = this._afterClosed.asObservable();
            this._onButtonClick = new Subject();
            this.onButtonClick$ = this._onButtonClick.asObservable();
            this._buttonList = new Subject();
            this.buttonList$ = this._buttonList.asObservable();
        }
        close(_Response) {
            const response = _Response ? _Response : this.defaultResponse;
            this._afterClosed.next(response);
        }
        onButtonClick(_Button) {
            this.defaultResponse.setClickedButtonID(_Button.ID);
            this._onButtonClick.next(_Button);
        }
        setButtonList(_ButtonList) {
            this._buttonList.next(_ButtonList);
        }
        setDefaultResponse(_Response) {
            this.defaultResponse = _Response;
        }
    }
    ConfirmBoxClass.ConfirmBoxEventsController = ConfirmBoxEventsController;
    // endregion
    class ConfirmBoxDefaultResponse extends ConfirmBoxResponse {
        constructor() {
            super();
            this.confirmBoxBelonging = null;
        }
        setBelonging(_ConfirmBoxBelonging) {
            this.confirmBoxBelonging = _ConfirmBoxBelonging;
        }
    }
    ConfirmBoxClass.ConfirmBoxDefaultResponse = ConfirmBoxDefaultResponse;
    class ConfirmBoxCarrier {
        constructor() {
            this.confirmBoxBelonging = new ConfirmBoxClass.ConfirmBoxBelonging();
        }
        setButtons(_Buttons) {
            if (_Buttons.length) {
                this.confirmBoxBelonging.Buttons = _Buttons;
            }
        }
        setTitle(_Title) {
            this.confirmBoxBelonging.Dispatch.Title = _Title;
        }
        setMessage(_Message) {
            this.confirmBoxBelonging.Dispatch.Message = _Message;
        }
        setButtonLabels(_Confirm, _Decline) {
            this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel = _Confirm;
            this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel = _Decline;
        }
        setConfig(_ConfirmBoxBelonging) {
            // region *** local UserConfig (defined on place where dialog is called) ***
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(_ConfirmBoxBelonging, this.confirmBoxBelonging.ConfirmBoxCoreConfig);
            // endregion
        }
        openConfirmBox$() {
            const service = ServiceLocator.injector.get(ConfirmBoxService);
            const confirmBoxController = service.open(this.confirmBoxBelonging);
            return confirmBoxController.afterClosed$;
        }
    }
    ConfirmBoxClass.ConfirmBoxCarrier = ConfirmBoxCarrier;
    class Settings {
        constructor() {
            this.Buttons = [];
            this.ConfirmBoxCoreConfig = new ConfirmBoxCoreConfig();
            this.Dispatch = new GlobalClass.Dispatch();
        }
    }
    ConfirmBoxClass.Settings = Settings;
    class ConfirmBoxCoreConfig {
        constructor() {
            this.Width = null;
            this.Height = null;
            this.ButtonPosition = null;
            this.LayoutType = null;
            this.Dispatch = null;
            this.ConfirmLabel = null;
            this.DeclineLabel = null;
            this.DisableIcon = null;
            this.AllowHTMLMessage = null;
        }
    }
    ConfirmBoxClass.ConfirmBoxCoreConfig = ConfirmBoxCoreConfig;
    class ConfirmBoxBelonging extends ConfirmBoxClass.Settings {
        constructor() {
            super();
            this.EntityUniqueID = 'C' + Math.random().toString(36).substr(2, 9);
            this.EventsController = new ConfirmBoxEventsController(this.EntityUniqueID);
            const ConfirmBoxCoreConfigurator = ServiceLocator.injector.get(ConfirmBoxConfigService);
            const baseSettings = new ConfirmBoxClass.Settings();
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(ConfirmBoxCoreConfigurator.productionConfig.ConfirmBoxCoreConfig, baseSettings.ConfirmBoxCoreConfig);
            this.ConfirmBoxCoreConfig = baseSettings.ConfirmBoxCoreConfig;
            this.Buttons = ConfirmBoxCoreConfigurator.productionConfig.Buttons.slice();
        }
    }
    ConfirmBoxClass.ConfirmBoxBelonging = ConfirmBoxBelonging;
})(ConfirmBoxClass || (ConfirmBoxClass = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZ3gtYXdlc29tZS1wb3B1cC90eXBlcy9jb25maXJtLWJveC9jb3JlL21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQWtCLE1BQU0sc0JBQXNCLENBQUM7QUFDbEUsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRXhELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQ3JFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBbUR4RCxNQUFNLEtBQVcsZUFBZSxDQXVNL0I7QUF2TUQsV0FBaUIsZUFBZTtJQUU1Qix3QkFBd0I7SUFHeEIsTUFBYSxxQkFBcUI7UUFJOUI7WUFIQSxnQkFBZ0I7WUFDUixzQkFBaUIsR0FBc0MsSUFBSSxlQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUd2RyxDQUFDO1FBRUQsZUFBZTtZQUNYLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzVELE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO2dCQUN6RCxNQUFNLFdBQVcsR0FBZSxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDOUQsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztnQkFDMUQsT0FBTyx1QkFBdUIsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQztRQUVELFVBQVUsQ0FBQyxRQUFtQztZQUMxQyxJ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dUMsSUFBSSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDaEgsTUFBTSwwQkFBMEIsR0FBNEIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNqSCxNQUFNLFlBQVksR0FBMEMsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0YsTUFBTSxXQUFXLEdBQTJDLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzFGLFdBQVcsQ0FBQyxjQUFjLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDaEksSUFBSSxDQUFDLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztZQUM5RCxJQUFJLENBQUMsT0FBTyxHQUFnQiwwQkFBMEIsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUYsQ0FBQztLQUVKO0lBaEJZLG1DQUFtQixzQkFnQi9CLENBQUE7QUFHTCxDQUFDLEVBdk1nQixlQUFlLEtBQWYsZUFBZSxRQXVNL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7R2xvYmFsQ2xhc3MsIEdsb2JhbEludGVyZmFjZX0gZnJvbSAnLi4vLi4vLi4vY29yZS9nbG9iYWwnO1xuaW1wb3J0IHtTZXJ2aWNlTG9jYXRvcn0gZnJvbSAnLi4vLi4vLi4vbG9jYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7RGlhbG9nTGF5b3V0RGlzcGxheSwgVmVydGljYWxQb3NpdGlvbn0gZnJvbSAnLi4vLi4vLi4vY29yZS9lbnVtcyc7XG5pbXBvcnQge0NvbmZpcm1Cb3hDb25maWdTZXJ2aWNlfSBmcm9tICcuL2NvbmZpcm0tYm94LWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7Q29uZmlybUJveFNlcnZpY2V9IGZyb20gJy4vY29uZmlybS1ib3gtc2VydmljZSc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29uZmlybUJveEludGVyZmFjZSB7XG4gICAgXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29uZmlybUJveFVzZXJDb25maWcge1xuICAgICAgICBCdXR0b25zPzogR2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXTtcbiAgICAgICAgQ29uZmlybUJveENvcmVDb25maWc/OiBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94Q29yZUNvbmZpZztcbiAgICAgICAgRGlzcGF0Y2g/OiBHbG9iYWxJbnRlcmZhY2UuSURpc3BhdGNoO1xuICAgIH1cbiAgICBcbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb25maXJtQm94Q29yZUNvbmZpZyB7XG4gICAgICAgIC8qKiBGaXhlZCBwb3B1cCB3aWR0aCAqL1xuICAgICAgICBXaWR0aD86IHN0cmluZztcbiAgICAgICAgLyoqIEZpeGVkIHBvcHVwIGhlaWdodCAqL1xuICAgICAgICBIZWlnaHQ/OiBzdHJpbmc7XG4gICAgICAgIEJ1dHRvblBvc2l0aW9uPzogVmVydGljYWxQb3NpdGlvbjtcbiAgICAgICAgTGF5b3V0VHlwZT86IERpYWxvZ0xheW91dERpc3BsYXk7XG4gICAgICAgIERpc3BhdGNoPzogR2xvYmFsSW50ZXJmYWNlLklEaXNwYXRjaDtcbiAgICAgICAgQ29uZmlybUxhYmVsPzogc3RyaW5nO1xuICAgICAgICBEZWNsaW5lTGFiZWw/OiBzdHJpbmc7XG4gICAgICAgIERpc2FibGVJY29uPzogYm9vbGVhbjtcbiAgICAgICAgQWxsb3dIVE1MTWVzc2FnZT86IGJvb2xlYW47XG4gICAgfVxuICAgIFxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbmZpcm1Cb3hCZWxvbmdpbmcge1xuICAgICAgICBCdXR0b25zOiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdO1xuICAgICAgICBDb25maXJtQm94Q29yZUNvbmZpZzogQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveENvcmVDb25maWc7XG4gICAgICAgIEVudGl0eVVuaXF1ZUlEOiBzdHJpbmc7XG4gICAgICAgIEV2ZW50c0NvbnRyb2xsZXI6IENvbmZpcm1Cb3hDbGFzcy5Db25maXJtQm94RXZlbnRzQ29udHJvbGxlcjtcbiAgICB9XG4gICAgXG4gICAgZXhwb3J0IGludGVyZmFjZSBJQ29uZmlybUJveFJlc3BvbnNlIHtcbiAgICAgICAgXG4gICAgICAgIHNldFN1Y2Nlc3MoX0lzU3VjY2VzczogYm9vbGVhbik6IHZvaWQ7XG4gICAgICAgIFxuICAgICAgICBzZXRDbGlja2VkQnV0dG9uSUQoX0NsaWNrZWRCdXR0b25JRCk6IHZvaWQ7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb25maXJtQm94UHVibGljUmVzcG9uc2Uge1xuICAgICAgICBTdWNjZXNzOiBib29sZWFuO1xuICAgICAgICBDbGlja2VkQnV0dG9uSUQ6IHN0cmluZ1xuICAgIH1cbiAgICBcbiAgICBleHBvcnQgaW50ZXJmYWNlIElQcml2YXRlUmVzcG9uc2VNZXJnZWQgZXh0ZW5kcyBJQ29uZmlybUJveFJlc3BvbnNlLCBHbG9iYWxJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZSB7XG4gICAgICAgIFxuICAgICAgICBjb25maXJtQm94QmVsb25naW5nOiBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94QmVsb25naW5nO1xuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb25maXJtQm94Q2xhc3Mge1xuICAgIFxuICAgIC8vIHJlZ2lvbiAqKiogUHVibGljICoqKlxuICAgIFxuICAgIFxuICAgIGV4cG9ydCBjbGFzcyBDb25maXJtQm94SW5pdGlhbGl6ZXIge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHByaXZhdGUgY29uZmlybUJveENhcnJpZXI6IENvbmZpcm1Cb3hDbGFzcy5Db25maXJtQm94Q2FycmllciA9IG5ldyBDb25maXJtQm94Q2xhc3MuQ29uZmlybUJveENhcnJpZXIoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvcGVuQ29uZmlybUJveCQoKTogT2JzZXJ2YWJsZTxDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94UHVibGljUmVzcG9uc2U+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpcm1Cb3hDYXJyaWVyLm9wZW5Db25maXJtQm94JCgpLnBpcGUobWFwKHJlc3AgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2ljQ29uZmlybUJveFJlc3BvbnNlID0gbmV3IENvbmZpcm1Cb3hSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDb250cm9sICAgICAgICAgICAgID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG4gICAgICAgICAgICAgICAgZGF0YUNvbnRyb2wuY29weVZhbHVlc0Zyb20ocmVzcCwgYmFzaWNDb25maXJtQm94UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNpY0NvbmZpcm1Cb3hSZXNwb25zZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0QnV0dG9ucyhfQnV0dG9uczogR2xvYmFsSW50ZXJmYWNlLklCdXR0b25bXSk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94Q2Fycmllci5zZXRCdXR0b25zKF9CdXR0b25zKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0Q29uZmlnKF9Db25maXJtQm94Q29yZUNvbmZpZzogQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveENvcmVDb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybUJveENhcnJpZXIuc2V0Q29uZmlnKF9Db25maXJtQm94Q29yZUNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNldERpc3BhdGNoKF9UaXRsZTogc3RyaW5nLCBfTWVzc2FnZTogc3RyaW5nID0gbnVsbCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94Q2Fycmllci5zZXRUaXRsZShfVGl0bGUpO1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94Q2Fycmllci5zZXRNZXNzYWdlKF9NZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0VGl0bGUoX1RpdGxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybUJveENhcnJpZXIuc2V0VGl0bGUoX1RpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0TWVzc2FnZShfTWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpcm1Cb3hDYXJyaWVyLnNldE1lc3NhZ2UoX01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZXRCdXR0b25MYWJlbHMoX0NvbmZpcm06IHN0cmluZywgX0RlY2xpbmU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlybUJveENhcnJpZXIuc2V0QnV0dG9uTGFiZWxzKF9Db25maXJtLCBfRGVjbGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGV4cG9ydCBjbGFzcyBDb25maXJtQm94UmVzcG9uc2UgZXh0ZW5kcyBHbG9iYWxDbGFzcy5EYXRhQ29udHJvbCBpbXBsZW1lbnRzIENvbmZpcm1Cb3hJbnRlcmZhY2UuSUNvbmZpcm1Cb3hSZXNwb25zZSwgQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveFB1YmxpY1Jlc3BvbnNlIHtcbiAgICAgICAgLy8gcHJpdmF0ZSBSZXNwb25zZTogRGlhbG9nUHJlcGFyZVJlc3BvbnNlICAgICAgICAgICAgPSBuZXcgRGlhbG9nUHJlcGFyZVJlc3BvbnNlKCk7XG4gICAgICAgIFxuICAgICAgICBTdWNjZXNzOiBib29sZWFuICAgICAgICA9IG51bGw7XG4gICAgICAgIENsaWNrZWRCdXR0b25JRDogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0U3VjY2VzcyhfSXNTdWNjZXNzOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLlN1Y2Nlc3MgPSBfSXNTdWNjZXNzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZXRDbGlja2VkQnV0dG9uSUQoX0NsaWNrZWRCdXR0b25JRCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5DbGlja2VkQnV0dG9uSUQgPSBfQ2xpY2tlZEJ1dHRvbklEO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZXhwb3J0IGNsYXNzIENvbmZpcm1Cb3hFdmVudHNDb250cm9sbGVyIHtcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHRSZXNwb25zZTogQ29uZmlybUJveEludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkO1xuICAgICAgICBcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfYWZ0ZXJDbG9zZWQ6IFN1YmplY3Q8Q29uZmlybUJveEludGVyZmFjZS5JUHJpdmF0ZVJlc3BvbnNlTWVyZ2VkPiA9IG5ldyBTdWJqZWN0PENvbmZpcm1Cb3hJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZD4oKTtcbiAgICAgICAgYWZ0ZXJDbG9zZWQkOiBPYnNlcnZhYmxlPENvbmZpcm1Cb3hJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZD4gICAgICAgICAgICAgICA9IHRoaXMuX2FmdGVyQ2xvc2VkLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX29uQnV0dG9uQ2xpY2s6IFN1YmplY3Q8R2xvYmFsSW50ZXJmYWNlLklCdXR0b24+ID0gbmV3IFN1YmplY3Q8R2xvYmFsSW50ZXJmYWNlLklCdXR0b24+KCk7XG4gICAgICAgIG9uQnV0dG9uQ2xpY2skOiBPYnNlcnZhYmxlPEdsb2JhbEludGVyZmFjZS5JQnV0dG9uPiAgICAgICAgICAgICAgID0gdGhpcy5fb25CdXR0b25DbGljay5hc09ic2VydmFibGUoKTtcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfYnV0dG9uTGlzdDogU3ViamVjdDxHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdPiAgPSBuZXcgU3ViamVjdDxHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdPigpO1xuICAgICAgICBidXR0b25MaXN0JDogT2JzZXJ2YWJsZTxHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdPiAgICAgICAgICAgICAgICA9IHRoaXMuX2J1dHRvbkxpc3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIEVudGl0eVVuaXF1ZUlEOiBzdHJpbmcpIHtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNsb3NlKF9SZXNwb25zZT86IENvbmZpcm1Cb3hJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZCk6IHZvaWQge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBfUmVzcG9uc2UgPyBfUmVzcG9uc2UgOiB0aGlzLmRlZmF1bHRSZXNwb25zZTtcbiAgICAgICAgICAgIHRoaXMuX2FmdGVyQ2xvc2VkLm5leHQocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvbkJ1dHRvbkNsaWNrKF9CdXR0b246IEdsb2JhbEludGVyZmFjZS5JQnV0dG9uKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRSZXNwb25zZS5zZXRDbGlja2VkQnV0dG9uSUQoX0J1dHRvbi5JRCk7XG4gICAgICAgICAgICB0aGlzLl9vbkJ1dHRvbkNsaWNrLm5leHQoX0J1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNldEJ1dHRvbkxpc3QoX0J1dHRvbkxpc3Q6IEdsb2JhbEludGVyZmFjZS5JQnV0dG9uW10pOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkxpc3QubmV4dChfQnV0dG9uTGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNldERlZmF1bHRSZXNwb25zZShfUmVzcG9uc2U6IENvbmZpcm1Cb3hJbnRlcmZhY2UuSVByaXZhdGVSZXNwb25zZU1lcmdlZCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0UmVzcG9uc2UgPSBfUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gZW5kcmVnaW9uXG4gICAgXG4gICAgZXhwb3J0IGNsYXNzIENvbmZpcm1Cb3hEZWZhdWx0UmVzcG9uc2UgZXh0ZW5kcyBDb25maXJtQm94UmVzcG9uc2UgaW1wbGVtZW50cyBDb25maXJtQm94SW50ZXJmYWNlLklQcml2YXRlUmVzcG9uc2VNZXJnZWQge1xuICAgICAgICBjb25maXJtQm94QmVsb25naW5nOiBDb25maXJtQm94QmVsb25naW5nID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0QmVsb25naW5nKF9Db25maXJtQm94QmVsb25naW5nKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpcm1Cb3hCZWxvbmdpbmcgPSBfQ29uZmlybUJveEJlbG9uZ2luZztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZXhwb3J0IGNsYXNzIENvbmZpcm1Cb3hDYXJyaWVyIHtcbiAgICAgICAgXG4gICAgICAgIGNvbmZpcm1Cb3hCZWxvbmdpbmc6IENvbmZpcm1Cb3hDbGFzcy5Db25maXJtQm94QmVsb25naW5nID0gbmV3IENvbmZpcm1Cb3hDbGFzcy5Db25maXJtQm94QmVsb25naW5nKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBzZXRCdXR0b25zKF9CdXR0b25zOiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdKSB7XG4gICAgICAgICAgICBpZiAoX0J1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkJ1dHRvbnMgPSBfQnV0dG9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBzZXRUaXRsZShfVGl0bGU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkRpc3BhdGNoLlRpdGxlID0gX1RpdGxlO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHNldE1lc3NhZ2UoX01lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkRpc3BhdGNoLk1lc3NhZ2UgPSBfTWVzc2FnZTtcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICBzZXRCdXR0b25MYWJlbHMoX0NvbmZpcm06IHN0cmluZywgX0RlY2xpbmU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkNvbmZpcm1MYWJlbCA9IF9Db25maXJtO1xuICAgICAgICAgICAgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkNvbmZpcm1Cb3hDb3JlQ29uZmlnLkRlY2xpbmVMYWJlbCA9IF9EZWNsaW5lO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHNldENvbmZpZyhfQ29uZmlybUJveEJlbG9uZ2luZzogQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveENvcmVDb25maWcpIHtcbiAgICAgICAgICAgIC8vIHJlZ2lvbiAqKiogbG9jYWwgVXNlckNvbmZpZyAoZGVmaW5lZCBvbiBwbGFjZSB3aGVyZSBkaWFsb2cgaXMgY2FsbGVkKSAqKipcbiAgICAgICAgICAgIGNvbnN0IGRhdGFDb250cm9sID0gbmV3IEdsb2JhbENsYXNzLkRhdGFDb250cm9sKCk7XG4gICAgICAgICAgICBkYXRhQ29udHJvbC5jb3B5VmFsdWVzRnJvbShfQ29uZmlybUJveEJlbG9uZ2luZywgdGhpcy5jb25maXJtQm94QmVsb25naW5nLkNvbmZpcm1Cb3hDb3JlQ29uZmlnKTtcbiAgICAgICAgICAgIC8vIGVuZHJlZ2lvblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvcGVuQ29uZmlybUJveCQoKTogT2JzZXJ2YWJsZTxDb25maXJtQm94SW50ZXJmYWNlLklQcml2YXRlUmVzcG9uc2VNZXJnZWQ+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2U6IENvbmZpcm1Cb3hTZXJ2aWNlID0gU2VydmljZUxvY2F0b3IuaW5qZWN0b3IuZ2V0KENvbmZpcm1Cb3hTZXJ2aWNlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1Cb3hDb250cm9sbGVyICAgICAgID0gc2VydmljZS5vcGVuKHRoaXMuY29uZmlybUJveEJlbG9uZ2luZyk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlybUJveENvbnRyb2xsZXIuYWZ0ZXJDbG9zZWQkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBleHBvcnQgY2xhc3MgU2V0dGluZ3Mge1xuICAgICAgICBCdXR0b25zOiBHbG9iYWxJbnRlcmZhY2UuSUJ1dHRvbltdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBbXTtcbiAgICAgICAgQ29uZmlybUJveENvcmVDb25maWc6IENvbmZpcm1Cb3hJbnRlcmZhY2UuSUNvbmZpcm1Cb3hDb3JlQ29uZmlnID0gbmV3IENvbmZpcm1Cb3hDb3JlQ29uZmlnKCk7XG4gICAgICAgIERpc3BhdGNoOiBHbG9iYWxJbnRlcmZhY2UuSURpc3BhdGNoICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IG5ldyBHbG9iYWxDbGFzcy5EaXNwYXRjaCgpO1xuICAgIH1cbiAgICBcbiAgICBleHBvcnQgY2xhc3MgQ29uZmlybUJveENvcmVDb25maWcgaW1wbGVtZW50cyBDb25maXJtQm94SW50ZXJmYWNlLklDb25maXJtQm94Q29yZUNvbmZpZyB7XG4gICAgICAgIFdpZHRoOiBzdHJpbmcgICAgICAgICAgICAgICAgICAgICAgID0gbnVsbDtcbiAgICAgICAgSGVpZ2h0OiBzdHJpbmcgICAgICAgICAgICAgICAgICAgICAgPSBudWxsO1xuICAgICAgICBCdXR0b25Qb3NpdGlvbjogVmVydGljYWxQb3NpdGlvbiAgICA9IG51bGw7XG4gICAgICAgIExheW91dFR5cGU6IERpYWxvZ0xheW91dERpc3BsYXkgICAgID0gbnVsbDtcbiAgICAgICAgRGlzcGF0Y2g6IEdsb2JhbEludGVyZmFjZS5JRGlzcGF0Y2ggPSBudWxsO1xuICAgICAgICBDb25maXJtTGFiZWw6IHN0cmluZyAgICAgICAgICAgICAgICA9IG51bGw7XG4gICAgICAgIERlY2xpbmVMYWJlbDogc3RyaW5nICAgICAgICAgICAgICAgID0gbnVsbDtcbiAgICAgICAgRGlzYWJsZUljb246IGJvb2xlYW4gICAgICAgICAgICAgICAgPSBudWxsO1xuICAgICAgICBBbGxvd0hUTUxNZXNzYWdlOiBib29sZWFuICAgICAgICAgICA9IG51bGw7XG4gICAgfVxuICAgIFxuICAgIGV4cG9ydCBjbGFzcyBDb25maXJtQm94QmVsb25naW5nIGV4dGVuZHMgQ29uZmlybUJveENsYXNzLlNldHRpbmdzIGltcGxlbWVudHMgQ29uZmlybUJveEludGVyZmFjZS5JQ29uZmlybUJveEJlbG9uZ2luZyB7XG4gICAgICAgIFxuICAgICAgICBFbnRpdHlVbmlxdWVJRDogc3RyaW5nID0gJ0MnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuICAgICAgICBFdmVudHNDb250cm9sbGVyOiBDb25maXJtQm94RXZlbnRzQ29udHJvbGxlcjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuRXZlbnRzQ29udHJvbGxlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IG5ldyBDb25maXJtQm94RXZlbnRzQ29udHJvbGxlcih0aGlzLkVudGl0eVVuaXF1ZUlEKTtcbiAgICAgICAgICAgIGNvbnN0IENvbmZpcm1Cb3hDb3JlQ29uZmlndXJhdG9yOiBDb25maXJtQm94Q29uZmlnU2VydmljZSA9IFNlcnZpY2VMb2NhdG9yLmluamVjdG9yLmdldChDb25maXJtQm94Q29uZmlnU2VydmljZSk7XG4gICAgICAgICAgICBjb25zdCBiYXNlU2V0dGluZ3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgQ29uZmlybUJveENsYXNzLlNldHRpbmdzKCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhQ29udHJvbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgR2xvYmFsQ2xhc3MuRGF0YUNvbnRyb2woKTtcbiAgICAgICAgICAgIGRhdGFDb250cm9sLmNvcHlWYWx1ZXNGcm9tKENvbmZpcm1Cb3hDb3JlQ29uZmlndXJhdG9yLnByb2R1Y3Rpb25Db25maWcuQ29uZmlybUJveENvcmVDb25maWcsIGJhc2VTZXR0aW5ncy5Db25maXJtQm94Q29yZUNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLkNvbmZpcm1Cb3hDb3JlQ29uZmlnID0gYmFzZVNldHRpbmdzLkNvbmZpcm1Cb3hDb3JlQ29uZmlnO1xuICAgICAgICAgICAgdGhpcy5CdXR0b25zICAgICAgICAgICAgICA9IENvbmZpcm1Cb3hDb3JlQ29uZmlndXJhdG9yLnByb2R1Y3Rpb25Db25maWcuQnV0dG9ucy5zbGljZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBcbn1cbiJdfQ==