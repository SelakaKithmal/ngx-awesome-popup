import { Subject } from "rxjs";
import { map } from "rxjs/operators";
import { GlobalClass } from "../../../core/global";
import { ServiceLocator } from "../../../locator.service";
import { ConfirmBoxConfigService } from "./confirm-box-config.service";
import { ConfirmBoxService } from "./confirm-box-service";
export var ConfirmBoxClass;
(function (ConfirmBoxClass) {
    // region *** Public ***
    class ConfirmBoxInitializer {
        constructor() {
            /** @internal */
            this.confirmBoxCarrier = new ConfirmBoxClass.ConfirmBoxCarrier();
        }
        openConfirmBox$() {
            return this.confirmBoxCarrier.openConfirmBox$().pipe(map((resp) => {
                const basicConfirmBoxResponse = new ConfirmBoxResponse();
                const dataControl = new GlobalClass.DataControl();
                dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);
                return basicConfirmBoxResponse;
            }));
        }
        setButtons(_Buttons) {
            this.confirmBoxCarrier.setButtons(_Buttons);
        }
        setConfig(_ConfirmBoxCoreConfig) {
            this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);
        }
        setDispatch(_Title, _Message = null) {
            this.confirmBoxCarrier.setTitle(_Title);
            this.confirmBoxCarrier.setMessage(_Message);
        }
        setTitle(_Title) {
            this.confirmBoxCarrier.setTitle(_Title);
        }
        setMessage(_Message) {
            this.confirmBoxCarrier.setMessage(_Message);
        }
        setButtonLabels(_Confirm, _Decline) {
            this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);
        }
    }
    ConfirmBoxClass.ConfirmBoxInitializer = ConfirmBoxInitializer;
    class ConfirmBoxResponse extends GlobalClass.DataControl {
        constructor() {
            super();
            // private Response: DialogPrepareResponse            = new DialogPrepareResponse();
            this.Success = null;
            this.ClickedButtonID = null;
        }
        setSuccess(_IsSuccess) {
            this.Success = _IsSuccess;
        }
        setClickedButtonID(_ClickedButtonID) {
            this.ClickedButtonID = _ClickedButtonID;
        }
    }
    ConfirmBoxClass.ConfirmBoxResponse = ConfirmBoxResponse;
    class ConfirmBoxEventsController {
        constructor(EntityUniqueID) {
            this.EntityUniqueID = EntityUniqueID;
            this._afterClosed = new Subject();
            this.afterClosed$ = this._afterClosed.asObservable();
            this._onButtonClick = new Subject();
            this.onButtonClick$ = this._onButtonClick.asObservable();
            this._buttonList = new Subject();
            this.buttonList$ = this._buttonList.asObservable();
        }
        close(_Response) {
            const response = _Response ? _Response : this.defaultResponse;
            this._afterClosed.next(response);
        }
        onButtonClick(_Button) {
            this.defaultResponse.setClickedButtonID(_Button.ID);
            this._onButtonClick.next(_Button);
        }
        setButtonList(_ButtonList) {
            this._buttonList.next(_ButtonList);
        }
        setDefaultResponse(_Response) {
            this.defaultResponse = _Response;
        }
    }
    ConfirmBoxClass.ConfirmBoxEventsController = ConfirmBoxEventsController;
    // endregion
    class ConfirmBoxDefaultResponse extends ConfirmBoxResponse {
        constructor() {
            super();
            this.confirmBoxBelonging = null;
        }
        setBelonging(_ConfirmBoxBelonging) {
            this.confirmBoxBelonging = _ConfirmBoxBelonging;
        }
    }
    ConfirmBoxClass.ConfirmBoxDefaultResponse = ConfirmBoxDefaultResponse;
    class ConfirmBoxCarrier {
        constructor() {
            this.confirmBoxBelonging = new ConfirmBoxClass.ConfirmBoxBelonging();
        }
        setButtons(_Buttons) {
            if (_Buttons.length) {
                this.confirmBoxBelonging.Buttons = _Buttons;
            }
        }
        setTitle(_Title) {
            this.confirmBoxBelonging.Dispatch.Title = _Title;
        }
        setMessage(_Message) {
            this.confirmBoxBelonging.Dispatch.Message = _Message;
        }
        setButtonLabels(_Confirm, _Decline) {
            this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel = _Confirm;
            this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel = _Decline;
        }
        setConfig(_ConfirmBoxBelonging) {
            // region *** local UserConfig (defined on place where dialog is called) ***
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(_ConfirmBoxBelonging, this.confirmBoxBelonging.ConfirmBoxCoreConfig);
            // endregion
        }
        openConfirmBox$() {
            const service = ServiceLocator.injector.get(ConfirmBoxService);
            const confirmBoxController = service.open(this.confirmBoxBelonging);
            return confirmBoxController.afterClosed$;
        }
    }
    ConfirmBoxClass.ConfirmBoxCarrier = ConfirmBoxCarrier;
    class Settings {
        constructor() {
            this.Buttons = [];
            this.ConfirmBoxCoreConfig = new ConfirmBoxCoreConfig();
            this.Dispatch = new GlobalClass.Dispatch();
        }
    }
    ConfirmBoxClass.Settings = Settings;
    class ConfirmBoxCoreConfig {
        constructor() {
            this.Width = null;
            this.Height = null;
            this.ButtonPosition = null;
            this.LayoutType = null;
            this.Dispatch = null;
            this.ConfirmLabel = null;
            this.DeclineLabel = null;
            this.DisableIcon = null;
            this.AllowHTMLMessage = null;
        }
    }
    ConfirmBoxClass.ConfirmBoxCoreConfig = ConfirmBoxCoreConfig;
    class ConfirmBoxBelonging extends ConfirmBoxClass.Settings {
        constructor() {
            super();
            this.EntityUniqueID = "C" + Math.random().toString(36).substr(2, 9);
            this.EventsController = new ConfirmBoxEventsController(this.EntityUniqueID);
            const ConfirmBoxCoreConfigurator = ServiceLocator.injector.get(ConfirmBoxConfigService);
            const baseSettings = new ConfirmBoxClass.Settings();
            const dataControl = new GlobalClass.DataControl();
            dataControl.copyValuesFrom(ConfirmBoxCoreConfigurator.productionConfig.ConfirmBoxCoreConfig, baseSettings.ConfirmBoxCoreConfig);
            this.ConfirmBoxCoreConfig = baseSettings.ConfirmBoxCoreConfig;
            this.Buttons = ConfirmBoxCoreConfigurator.productionConfig.Buttons.slice();
        }
    }
    ConfirmBoxClass.ConfirmBoxBelonging = ConfirmBoxBelonging;
})(ConfirmBoxClass || (ConfirmBoxClass = {}));
//# sourceMappingURL=data:application/json;base64,