{"version":3,"file":"costlydeveloper-ngx-awesome-popup.js","sources":["../../ngx-awesome-popup/core/enums.ts","../../ngx-awesome-popup/core/global.ts","../../ngx-awesome-popup/locator.service.ts","../../ngx-awesome-popup/types/confirm-box/core/confirm-box-config.service.ts","../../ngx-awesome-popup/core/animations.ts","../../ngx-awesome-popup/types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component.ts","../../ngx-awesome-popup/core/dialog-injector.ts","../../ngx-awesome-popup/types/confirm-box/core/confirm-box-service.ts","../../ngx-awesome-popup/types/confirm-box/core/model.ts","../../ngx-awesome-popup/types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component.ts","../../ngx-awesome-popup/types/toast-notification/core/toast-notification-config.service.ts","../../ngx-awesome-popup/types/toast-notification/core/toast-notification.service.ts","../../ngx-awesome-popup/types/toast-notification/core/model.ts","../../ngx-awesome-popup/default-loader/default-loader.component.ts","../../ngx-awesome-popup/types/dialog/core/dialog-config.service.ts","../../ngx-awesome-popup/core/insertion.directive.ts","../../ngx-awesome-popup/core/insertion-loader.directive.ts","../../ngx-awesome-popup/types/dialog/dialog-wrapper/dialog-wrapper.component.ts","../../ngx-awesome-popup/types/dialog/core/dialog.service.ts","../../ngx-awesome-popup/types/dialog/core/model.ts","../../ngx-awesome-popup/core/global-config.service.ts","../../ngx-awesome-popup/ngx-awesome-popup.module.ts","../../public_api.ts","../../costlydeveloper-ngx-awesome-popup.ts"],"sourcesContent":["export enum DialogLayoutDisplay {\n    NONE    = 0,\n    SUCCESS = 1,\n    INFO    = 2,\n    WARNING = 3,\n    DANGER  = 4\n}\n\nexport enum ButtonLayoutDisplay {\n    NONE      = 0,\n    SUCCESS   = 1,\n    INFO      = 2,\n    WARNING   = 3,\n    DANGER    = 4,\n    DARK      = 5,\n    LIGHT     = 6,\n    PRIMARY   = 7,\n    SECONDARY = 8,\n    LINK      = 9\n}\n\nexport enum ColorVariance {\n    \n    SUCCESS   = 1,\n    INFO      = 2,\n    WARNING   = 3,\n    DANGER    = 4,\n    DARK      = 5,\n    LIGHT     = 6,\n    PRIMARY   = 7,\n    SECONDARY = 8,\n}\n\nexport type VerticalPosition = 'left' | 'center' | 'right';\n","import {ButtonLayoutDisplay} from './enums';\n\nexport namespace GlobalInterface {\n    \n    /**\n     * Each property of {@link ColorList} represent a string which represent a color in hex or rgb/rgba format.\n     * For available color types(properties) check {@link IColorTypes} interface.\n     * Every color is optional, and it will reflect on dialog or button color types and its color contrast or variance.\n     *  * ```typescript\n     * // ColorList object example.\n     * const colorList = {\n     *         ColorList: {\n     *            Primary  : '#ff9e00',\n     *            Secondary: '#989ea5',\n     *            Info     : '#2f8ee5',\n     *            Success  : '#3caea3',\n     *            Warning  : '#ffc107',\n     *            Danger   : '#e46464',\n     *            Light    : '#fbfbfb',\n     *            Dark     : '#343a40'\n     *           }\n     *        }\n     * ```\n     */\n    export interface IGlobalUserConfig {\n        ColorList?: GlobalInterface.IColorTypes;\n    }\n    \n    export interface IGlobalConfig {\n        DisplayColor?: GlobalInterface.IColorObject;\n    }\n    \n    export interface IColorTypes {\n        Primary?: string;\n        Secondary?: string;\n        Success?: string;\n        Info?: string;\n        Warning?: string;\n        Danger?: string;\n        Light?: string;\n        Dark?: string;\n    }\n    \n    export interface IPrivateResponse {\n        \n        setBelonging(_DialogBelonging): void\n    }\n    \n    /**\n     * Interface for custom button.\n     *\n     * Example:\n     * ```typescript\n     * // Custom button object.\n     * const button = {\n     *        ID         : 'confirm_btn',\n     *        Label:     : 'Confirm'\n     *        LayoutType : ButtonLayoutDisplay.SUCCESS\n     *  }\n     * // Or instantiated with ButtonMaker class\n     * const button2 = new ButtonMaker('Confirm', 'confirm_btn', ButtonLayoutDisplay.SUCCESS)\n     * ```\n     * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n     */\n    export interface IButton {\n        Label: string;\n        LayoutType: ButtonLayoutDisplay | null;\n        ID?: string;\n    }\n    \n    export interface IColorObject {\n        Primary?: GlobalInterface.IColorProvider;\n        Secondary?: GlobalInterface.IColorProvider;\n        Success?: GlobalInterface.IColorProvider;\n        Info?: GlobalInterface.IColorProvider;\n        Warning?: GlobalInterface.IColorProvider;\n        Danger?: GlobalInterface.IColorProvider;\n        Light?: GlobalInterface.IColorProvider;\n        Dark?: GlobalInterface.IColorProvider;\n    }\n    \n    export interface IColorProvider {\n        \n        Base: string;\n        Brighten: string;\n        BrightenForShade: string;\n        Darken: string;\n        DarkenForShade: string;\n        ContrastColor: string;\n        BrightShade: string;\n        TransparentDarkenVariance: string;\n        IsBaseBright: boolean;\n    }\n    export interface IMessage {\n        Title: string;\n        Description: string;\n    }\n}\n\nexport namespace GlobalClass {\n    \n    export class Message {\n        Title: string       = null;\n        Description: string = null;\n    }\n    \n    export class ButtonMaker implements GlobalInterface.IButton {\n        \n        constructor(public Label: string, public ID: string, public LayoutType: ButtonLayoutDisplay = ButtonLayoutDisplay.PRIMARY) {\n        }\n    }\n    \n    export class GlobalConfig implements GlobalInterface.IGlobalConfig {\n        DisplayColor: GlobalInterface.IColorObject = new GlobalClass.DisplayColor();\n    }\n    \n    export class DisplayColor implements GlobalInterface.IColorObject {\n        Primary: ColorProvider   = null;\n        Secondary: ColorProvider = null;\n        Success: ColorProvider   = null;\n        Info: ColorProvider      = null;\n        Warning: ColorProvider   = null;\n        Danger: ColorProvider    = null;\n        Light: ColorProvider     = null;\n        Dark: ColorProvider      = null;\n    }\n    \n    export class ColorProvider {\n        \n        Base: string                      = null;\n        Brighten: string                  = null;\n        BrightenForShade: string          = null;\n        Darken: string                    = null;\n        DarkenForShade: string            = null;\n        ContrastColor: string             = null;\n        TransparentDarkenVariance: string = null;\n        BrightShade: string               = null;\n        IsBaseBright: boolean             = null;\n        \n        \n        constructor(_Color: string) {\n            if (this.Base = this.isColor(_Color)) {\n                this.Brighten                  = this.brightness(this.Base, 'brighten', 20);\n                this.BrightenForShade          = this.brightness(this.Base, 'brighten', 10);\n                this.Darken                    = this.brightness(this.Base, 'darken', 20);\n                this.DarkenForShade            = this.brightness(this.Base, 'darken', 10);\n                const luminance                = Math.floor(this.luminance(this.Base) * 100);\n                const darken                   = luminance > 50 ? 5 : (luminance > 40 ? 10 : (luminance > 20 ? 15 : luminance));\n                const brighten                 = luminance > 55 ? 65 : (luminance > 45 ? 60 : (luminance > 20 ? 55 : (luminance > 10 ? 45 : 80)));\n                this.BrightShade               = this.brightness(this.brightness(this.Base, 'darken', darken), 'brighten', brighten);\n                this.TransparentDarkenVariance = this.brightness(this.transparentize(this.Base, 80), 'darken', 40);\n                if (this.isBright(this.Base)) {\n                    this.ContrastColor = 'rgb(52, 58, 64)';\n                    this.IsBaseBright  = true;\n                } else {\n                    this.ContrastColor = 'rgb(255,255,255)';\n                    this.IsBaseBright  = false;\n                }\n                \n                /*         console.log('%c Color ', `background: ${this.BrightShade}; color: ${this.ContrastColor}`, luminance, darken, brighten);\n                           console.log('%c Brighten ', `background: ${this.Brighten}; color: ${this.ContrastColor}`, this.Brighten);\n                           console.log('%c BrightenForShade ', `background: ${this.BrightenForShade}; color: ${this.ContrastColor}`, this.BrightenForShade);\n                           console.log('%c Darken ', `background: ${this.Darken}; color: ${this.ContrastColor}`, this.Darken);\n                           console.log('%c DarkenForShade ', `background: ${this.DarkenForShade}; color: ${this.ContrastColor}`, this.DarkenForShade);*/\n            }\n        }\n        \n        private isBright(_Rgb: string) {\n            return this.contrast(this.luminance(_Rgb));\n        }\n        \n        private brightness(_Rgb: string, _Action: 'brighten' | 'darken', _Percentage: number): string {\n            const rgbIntArray               = this.getRGBArray(_Rgb);\n            const [lowest, middle, highest] = this.getLowMidHi(rgbIntArray);\n            \n            if (_Action === 'brighten' && lowest.val === 255) {\n                return _Rgb;\n            }\n            \n            if (_Action === 'darken' && highest.val === 0) {\n                return _Rgb;\n            }\n            \n            const amount = _Percentage / 100 * 255;\n            \n            let returnList = [];\n            \n            if (_Action === 'brighten') {\n                returnList[lowest.index]  = Math.round(lowest.val + (Math.min(255 - lowest.val, amount)));\n                const increaseFraction    = (returnList[lowest.index] - lowest.val) / (255 - lowest.val);\n                returnList[middle.index]  = middle.val + (255 - middle.val) * increaseFraction;\n                returnList[highest.index] = highest.val + (255 - highest.val) * increaseFraction;\n            }\n            if (_Action === 'darken') {\n                returnList[highest.index] = highest.val - (Math.min(highest.val, amount));\n                const decreaseFraction    = (highest.val - returnList[highest.index]) / (highest.val);\n                returnList[middle.index]  = middle.val - middle.val * decreaseFraction;\n                returnList[lowest.index]  = lowest.val - lowest.val * decreaseFraction;\n            }\n            \n            returnList = returnList.map(item => Math.round(item));\n            if (rgbIntArray.length > 3) {\n                returnList.push(rgbIntArray[3]);\n                return (`rgba(${returnList.join()})`);\n            }\n            return (`rgb(${returnList.join()})`);\n        }\n        \n        private getLowMidHi(_RgbArray: number[]) {\n            const rgbArrayCopy         = _RgbArray.slice();\n            const rgbArrayWithoutAlpha = _RgbArray.length > 3 ? rgbArrayCopy.reverse().slice(1).reverse() : _RgbArray;\n            let highest                = {val: -1, index: -1};\n            let lowest                 = {val: Infinity, index: -1};\n            \n            rgbArrayWithoutAlpha.map((val, index) => {\n                if (val > highest.val) {\n                    highest = {val: val, index: index};\n                }\n                if (val < lowest.val) {\n                    lowest = {val: val, index: index};\n                }\n            });\n            \n            if (lowest.index === highest.index) {\n                lowest.index = highest.index + 1;\n            }\n            \n            const middleIndex = (3 - highest.index - lowest.index);\n            let middle        = {val: rgbArrayWithoutAlpha[middleIndex], index: middleIndex};\n            return [lowest, middle, highest];\n        }\n        \n        private contrast(_Luminance) {\n            const brightest = Math.max(1.05, _Luminance + 0.05);\n            const darkest   = Math.min(1.05, _Luminance + 0.05);\n            const contrast  = (brightest) / (darkest);\n            return contrast < 3;\n        }\n        \n        private isColor(_StrColor) {\n            const CSSDeclaration = new Option().style;\n            CSSDeclaration.color = _StrColor;\n            return !!CSSDeclaration.color ? CSSDeclaration.color : null;\n        }\n        \n        private getRGBArray(_Rgb: string): number[] {\n            return _Rgb.replace(/^(rgb|rgba)\\(/, '').replace(/\\)$/, '').replace(/\\s/g, '').split(',').map(x => +x);\n        }\n        \n        private luminance(_Rgb: string) {\n            const rgbIntArray = this.getRGBArray(_Rgb);\n            const W3algorithm = rgbIntArray.map(item => {\n                item /= 255;\n                return item <= 0.03928\n                    ? item / 12.92\n                    : Math.pow((item + 0.055) / 1.055, 2.4);\n            });\n            return W3algorithm[0] * 0.2126 + W3algorithm[1] * 0.7152 + W3algorithm[2] * 0.0722;\n        }\n        \n        private transparentize(_Rgb: string, _Percentage: number) {\n            const baseArray = this.Base.replace(/^(rgb|rgba)\\(/, '').replace(/\\)$/, '').replace(/\\s/g, '').split(',').map(x => +x);\n            if (baseArray.length > 3) {\n                baseArray.pop();\n            }\n            const amount = (100 - _Percentage) / 100;\n            baseArray.push(amount);\n            return (`rgb(${baseArray.join()})`);\n        }\n        \n    }\n    \n    export class DataControl {\n        /**\n         * @ignore\n         */\n        public copyValuesFrom(_Data: any, _DestinationObject: any): any {\n            \n            if (typeof _Data !== 'object') {\n                return _DestinationObject;\n            }\n            \n            const dataKeys              = Object.keys(_Data);\n            const destinationObjectKeys = Object.keys(_DestinationObject);\n            \n            dataKeys.forEach(key => {\n                \n                if (destinationObjectKeys.find(tKey => tKey === key || tKey === '_' + key)) {\n                    \n                    if (key.includes('Date')) {\n                        const date = Date.parse(_Data[key]);\n                        if (date) {\n                            _DestinationObject[key] = new Date(date);\n                        } else {\n                            if (_Data[key] !== null) {\n                                _DestinationObject[key] = _Data[key];\n                            }\n                        }\n                    } else {\n                        if (_Data[key] !== null) {\n                            _DestinationObject[key] = _Data[key];\n                        }\n                        \n                    }\n                }\n            });\n            \n            return _DestinationObject;\n        }\n    }\n}\n","import {Injector} from '@angular/core';\n\n// @dynamic\nexport class ServiceLocator {\n    static injector: Injector;\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {ConfirmBoxClass, ConfirmBoxInterface} from './model';\nimport {GlobalClass} from '../../../core/global';\nimport {DialogLayoutDisplay} from '../../../core/enums';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfirmBoxConfigService {\n    \n    authorConfig: ConfirmBoxInterface.IConfirmBoxUserConfig     = new ConfirmBoxClass.Settings();\n    productionConfig: ConfirmBoxInterface.IConfirmBoxUserConfig = new ConfirmBoxClass.Settings();\n    \n    constructor(@Inject('confirmBoxConfig') private userConfig: ConfirmBoxInterface.IConfirmBoxUserConfig = {}) {\n        \n        // region *** confirmBox userConfig (user input app-module) ***\n        const userConfigBase = new ConfirmBoxClass.Settings();\n        const dataControl    = new GlobalClass.DataControl();\n        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, userConfigBase.ConfirmBoxCoreConfig); // this will make sure that object has right properties\n        userConfig.ConfirmBoxCoreConfig = userConfigBase.ConfirmBoxCoreConfig;\n        // endregion\n        \n        // region *** author default config values (if there is no user input) ***\n        this.authorConfig.ConfirmBoxCoreConfig.Width          = 'auto';\n        this.authorConfig.ConfirmBoxCoreConfig.Height         = 'auto';\n        this.authorConfig.ConfirmBoxCoreConfig.ButtonPosition = 'center';\n        this.authorConfig.ConfirmBoxCoreConfig.ConfirmLabel   = 'Confirm';\n        this.authorConfig.ConfirmBoxCoreConfig.DeclineLabel   = 'Decline';\n        this.authorConfig.ConfirmBoxCoreConfig.LayoutType     = DialogLayoutDisplay.NONE;\n        \n        // endregion\n        \n        // region *** Production setup ***\n        dataControl.copyValuesFrom(this.authorConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);\n        dataControl.copyValuesFrom(userConfig.ConfirmBoxCoreConfig, this.productionConfig.ConfirmBoxCoreConfig);\n        // endregion\n        \n    }\n}\n","import {animate, state, style, transition, trigger} from '@angular/animations';\n\n\nexport function fadeInOut(_OpacityMin = 0, _OpacityMax = 1) {\n    \n    return trigger('fadeInOut', [\n        // ...\n        state('open', style({\n            opacity: _OpacityMax\n        })),\n        state('closed', style({\n            opacity: _OpacityMin\n        })),\n        transition('* => close-fast', [\n            animate('0.1s')\n        ]),\n        transition('* => open', [\n            animate('0.2s')\n        ]),\n        transition('* => close-slow', [\n            animate('1.3s')\n        ]),\n        transition('* => close-instant', [\n            animate('0s')\n        ])\n    ]);\n};\n","import {AfterViewInit, ChangeDetectorRef, Component} from '@angular/core';\nimport {fadeInOut} from '../../../core/animations';\nimport {GlobalInterface} from '../../../core/global';\nimport {ConfirmBoxClass} from '../core/model';\nimport {Observable, Observer} from 'rxjs';\nimport {delay} from 'rxjs/operators';\n\n@Component({\n    selector   : 'app-confirm-box-wrapper',\n    templateUrl: './confirm-box-wrapper.component.html',\n    styleUrls  : ['./confirm-box-wrapper.component.scss'],\n    animations : [fadeInOut(0, 1)]\n})\nexport class ConfirmBoxWrapperComponent implements AfterViewInit {\n    fadeInOutAnimation: string = 'open';\n    \n    constructor(\n        public confirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging,\n        private cd: ChangeDetectorRef\n    ) {\n    }\n    \n    ngAfterViewInit(): void {\n        this.setResponse(false);\n        this.cd.detectChanges();\n    }\n    \n    setResponse(_IsSuccess: boolean, _ClickedButtonID?: string): void {\n        const response = new ConfirmBoxClass.ConfirmBoxDefaultResponse();\n        if (_ClickedButtonID) {\n            response.ClickedButtonID = _ClickedButtonID;\n        }\n        \n        response.setSuccess(_IsSuccess);\n        response.setBelonging(this.confirmBoxBelonging);\n        this.confirmBoxBelonging.EventsController.setDefaultResponse(response);\n    }\n    \n    onOverlayClicked(evt: MouseEvent): void {\n        // console.log('onOverlayClicked');\n    }\n    \n    onCustomButton(_Button: GlobalInterface.IButton): void {\n        this.confirmBoxBelonging.EventsController.onButtonClick(_Button);\n        this.setResponse(true, _Button.ID);\n        this.confirmBoxBelonging.EventsController.close();\n    }\n    \n    onButtonClick(_Type: 'confirm' | 'decline') {\n        this.setResponse(_Type === 'confirm');\n        this.confirmBoxBelonging.EventsController.close();\n    }\n    \n    closeParent$(_ClosingAnimation: string): Observable<any> {\n        this.fadeInOutAnimation = _ClosingAnimation;\n        const timer             = _ClosingAnimation === 'close-slow' ? 1400 : 150;\n        \n        return new Observable((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        }).pipe(delay(timer));\n    }\n}\n","import {InjectFlags, InjectionToken, Injector, Type} from '@angular/core';\n\nexport class DialogInjector implements Injector {\n    constructor(\n        private ParentInjector: Injector,\n        private AdditionalTokens: WeakMap<any, any>\n    ) {\n    }\n    \n    get<T>(\n        token: Type<T> | InjectionToken<T>,\n        notFoundValue?: T,\n        flags?: InjectFlags\n    ): T;\n    get(token: any, notFoundValue?: any): any;\n    get(token: any, notFoundValue?: any, flags?: any): any {\n        const value = this.AdditionalTokens.get(token);\n        \n        if (value) {\n            return value;\n        }\n        \n        return this.ParentInjector.get<any>(token, notFoundValue);\n    }\n}\n","import {ApplicationRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, Injector} from '@angular/core';\nimport {ConfirmBoxClass} from './model';\nimport {ConfirmBoxWrapperComponent} from '../confirm-box-wrapper/confirm-box-wrapper.component';\nimport {map} from 'rxjs/operators';\nimport {DialogInjector} from '../../../core/dialog-injector';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfirmBoxService {\n    \n    confirmBoxComponentRefList: ComponentRef<ConfirmBoxWrapperComponent>[] = [];\n    \n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {\n    }\n    \n    open(_ConfirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging): ConfirmBoxClass.ConfirmBoxEventsController {\n        const dialogController = _ConfirmBoxBelonging.EventsController;\n        const componentRef     = this.getComponentRef(dialogController, _ConfirmBoxBelonging);\n        \n        this.confirmBoxComponentRefList.push(componentRef);\n        componentRef.instance.confirmBoxBelonging = _ConfirmBoxBelonging;\n        \n        this.appendToBodyParentComponent(componentRef);\n        \n        this.listeners(dialogController);\n        \n        return dialogController;\n        \n    }\n    \n    getComponentRef(_EventsController: ConfirmBoxClass.ConfirmBoxEventsController, _ConfirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging): ComponentRef<any> | null {\n        let componentFactory;\n        \n        const dialogIndex = this.findDialogIndex(_ConfirmBoxBelonging.EntityUniqueID);\n        if (dialogIndex === -1) {\n            \n            const weakMap = new WeakMap();\n            weakMap.set(ConfirmBoxClass.ConfirmBoxEventsController, _EventsController);\n            \n            componentFactory = this.componentFactoryResolver.resolveComponentFactory(ConfirmBoxWrapperComponent);\n            return componentFactory.create(new DialogInjector(this.injector, weakMap));\n            \n        }\n        \n        return null;\n    }\n    \n    listeners(_EventsController: ConfirmBoxClass.ConfirmBoxEventsController) {\n        \n        // Listener for closing dialog\n        const closeDialogSubscription = _EventsController.afterClosed$.subscribe((response) => {\n            const modalIndex = this.findDialogIndex(response.confirmBoxBelonging.EntityUniqueID);\n            this.removeFromBodyParentComponent(modalIndex);\n            closeDialogSubscription.unsubscribe();\n        });\n        \n    }\n    \n    \n    appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n        \n        // attach view to ignite lifecycle hooks\n        this.appRef.attachView(_ComponentRef.hostView);\n        \n        // DOM\n        const domElem = (_ComponentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElem);\n        \n    }\n    \n    closeDialogWrapperComponent(_DialogUniqueID: string) {\n        const modalIndex = this.findDialogIndex(_DialogUniqueID);\n        this.removeFromBodyParentComponent(modalIndex);\n    }\n    \n    removeFromBodyParentComponent(_DialogIndex: number): void {\n        if (_DialogIndex > -1) {\n            this.confirmBoxComponentRefList[_DialogIndex].instance.closeParent$('close-fast').pipe(map(item => {\n                this.appRef.detachView(this.confirmBoxComponentRefList[_DialogIndex].hostView);\n                this.confirmBoxComponentRefList[_DialogIndex].destroy();\n                this.confirmBoxComponentRefList.splice(_DialogIndex, 1);\n            })).subscribe();\n        }\n    }\n    \n    findDialogIndex(_DialogUniqueID: string): number {\n        return this.confirmBoxComponentRefList.findIndex((item) => {\n            return _DialogUniqueID === item.instance.confirmBoxBelonging.EntityUniqueID;\n        });\n    }\n}\n","import {Observable, Subject} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {GlobalClass, GlobalInterface} from '../../../core/global';\nimport {ServiceLocator} from '../../../locator.service';\nimport {DialogLayoutDisplay, VerticalPosition} from '../../../core/enums';\nimport {ConfirmBoxConfigService} from './confirm-box-config.service';\nimport {ConfirmBoxService} from './confirm-box-service';\n\nexport namespace ConfirmBoxInterface {\n    \n    export interface IConfirmBoxUserConfig {\n        Buttons?: GlobalInterface.IButton[];\n        ConfirmBoxCoreConfig?: ConfirmBoxInterface.IConfirmBoxCoreConfig;\n        Message?: GlobalInterface.IMessage;\n    }\n    \n    export interface IConfirmBoxCoreConfig {\n        /** Fixed popup width */\n        Width?: string;\n        /** Fixed popup height */\n        Height?: string;\n        ButtonPosition?: VerticalPosition;\n        LayoutType?: DialogLayoutDisplay;\n        Message?: GlobalInterface.IMessage;\n        ConfirmLabel?: string;\n        DeclineLabel?: string;\n    }\n    \n    export interface IConfirmBoxBelonging {\n        Buttons: GlobalInterface.IButton[];\n        ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig;\n        EntityUniqueID: string;\n        EventsController: ConfirmBoxClass.ConfirmBoxEventsController;\n    }\n    \n    export interface IConfirmBoxResponse {\n        \n        setSuccess(_IsSuccess: boolean): void;\n        \n        setClickedButtonID(_ClickedButtonID): void;\n        \n    }\n    \n    export interface IConfirmBoxPublicResponse {\n        Success: boolean;\n        ClickedButtonID: string\n    }\n    \n    export interface IPrivateResponseMerged extends IConfirmBoxResponse, GlobalInterface.IPrivateResponse {\n        \n        confirmBoxBelonging: ConfirmBoxInterface.IConfirmBoxBelonging;\n    }\n    \n}\n\nexport namespace ConfirmBoxClass {\n    \n    // region *** Public ***\n    \n\n    export class ConfirmBoxInitializer {\n        /** @internal */\n        private confirmBoxCarrier: ConfirmBoxClass.ConfirmBoxCarrier = new ConfirmBoxClass.ConfirmBoxCarrier();\n        \n        constructor() {\n        }\n        \n        openConfirmBox$(): Observable<ConfirmBoxInterface.IConfirmBoxPublicResponse> {\n            return this.confirmBoxCarrier.openConfirmBox$().pipe(map(resp => {\n                const basicConfirmBoxResponse = new ConfirmBoxResponse();\n                const dataControl             = new GlobalClass.DataControl();\n                dataControl.copyValuesFrom(resp, basicConfirmBoxResponse);\n                return basicConfirmBoxResponse;\n            }));\n        }\n        \n        setButtons(_Buttons: GlobalInterface.IButton[]): void {\n            this.confirmBoxCarrier.setButtons(_Buttons);\n        }\n        \n        setConfig(_ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig) {\n            this.confirmBoxCarrier.setConfig(_ConfirmBoxCoreConfig);\n        }\n        \n        setMessage(_Title: string, _Description: string = null): void {\n            this.confirmBoxCarrier.setTitle(_Title);\n            this.confirmBoxCarrier.setDescription(_Description);\n        }\n        \n        setTitle(_Title: string): void {\n            this.confirmBoxCarrier.setTitle(_Title);\n        }\n    \n        setDescription(_Description: string): void {\n            this.confirmBoxCarrier.setDescription(_Description);\n        }\n        \n        setButtonLabels(_Confirm: string, _Decline?: string): void {\n            this.confirmBoxCarrier.setButtonLabels(_Confirm, _Decline);\n        }\n        \n    }\n    \n    export class ConfirmBoxResponse extends GlobalClass.DataControl implements ConfirmBoxInterface.IConfirmBoxResponse, ConfirmBoxInterface.IConfirmBoxPublicResponse {\n        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n        \n        Success: boolean        = null;\n        ClickedButtonID: string = null;\n        \n        constructor() {\n            super();\n        }\n        \n        setSuccess(_IsSuccess: boolean): void {\n            this.Success = _IsSuccess;\n        }\n        \n        setClickedButtonID(_ClickedButtonID): void {\n            this.ClickedButtonID = _ClickedButtonID;\n        }\n        \n        \n    }\n    \n    export class ConfirmBoxEventsController {\n        \n        defaultResponse: ConfirmBoxInterface.IPrivateResponseMerged;\n        \n        private readonly _afterClosed: Subject<ConfirmBoxInterface.IPrivateResponseMerged> = new Subject<ConfirmBoxInterface.IPrivateResponseMerged>();\n        afterClosed$: Observable<ConfirmBoxInterface.IPrivateResponseMerged>               = this._afterClosed.asObservable();\n        \n        \n        private readonly _onButtonClick: Subject<GlobalInterface.IButton> = new Subject<GlobalInterface.IButton>();\n        onButtonClick$: Observable<GlobalInterface.IButton>               = this._onButtonClick.asObservable();\n        private readonly _buttonList: Subject<GlobalInterface.IButton[]>  = new Subject<GlobalInterface.IButton[]>();\n        buttonList$: Observable<GlobalInterface.IButton[]>                = this._buttonList.asObservable();\n        \n        constructor(private EntityUniqueID: string) {\n        }\n        \n        \n        close(_Response?: ConfirmBoxInterface.IPrivateResponseMerged): void {\n            const response = _Response ? _Response : this.defaultResponse;\n            this._afterClosed.next(response);\n        }\n        \n        onButtonClick(_Button: GlobalInterface.IButton): void {\n            this.defaultResponse.setClickedButtonID(_Button.ID);\n            this._onButtonClick.next(_Button);\n        }\n        \n        setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n            this._buttonList.next(_ButtonList);\n        }\n        \n        setDefaultResponse(_Response: ConfirmBoxInterface.IPrivateResponseMerged): void {\n            this.defaultResponse = _Response;\n        }\n    }\n    // endregion\n    \n    export class ConfirmBoxDefaultResponse extends ConfirmBoxResponse implements ConfirmBoxInterface.IPrivateResponseMerged {\n        confirmBoxBelonging: ConfirmBoxBelonging = null;\n        \n        constructor() {\n            super();\n        }\n        \n        setBelonging(_ConfirmBoxBelonging): void {\n            this.confirmBoxBelonging = _ConfirmBoxBelonging;\n        }\n        \n    }\n    \n    export class ConfirmBoxCarrier {\n        \n        confirmBoxBelonging: ConfirmBoxClass.ConfirmBoxBelonging = new ConfirmBoxClass.ConfirmBoxBelonging();\n        \n        constructor() {\n        }\n        \n        setButtons(_Buttons: GlobalInterface.IButton[]) {\n            if (_Buttons.length) {\n                this.confirmBoxBelonging.Buttons = _Buttons;\n            }\n        }\n        \n        setTitle(_Title: string): void {\n            this.confirmBoxBelonging.Message.Title = _Title;\n        }\n    \n        setDescription(_Description: string): void {\n            this.confirmBoxBelonging.Message.Description = _Description;\n        }\n    \n    \n        setButtonLabels(_Confirm: string, _Decline: string): void {\n            this.confirmBoxBelonging.ConfirmBoxCoreConfig.ConfirmLabel = _Confirm;\n            this.confirmBoxBelonging.ConfirmBoxCoreConfig.DeclineLabel = _Decline;\n        }\n        \n        setConfig(_ConfirmBoxBelonging: ConfirmBoxInterface.IConfirmBoxCoreConfig) {\n            // region *** local UserConfig (defined on place where dialog is called) ***\n            const dataControl = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(_ConfirmBoxBelonging, this.confirmBoxBelonging.ConfirmBoxCoreConfig);\n            // endregion\n        }\n        \n        openConfirmBox$(): Observable<ConfirmBoxInterface.IPrivateResponseMerged> {\n            const service: ConfirmBoxService = ServiceLocator.injector.get(ConfirmBoxService);\n            const confirmBoxController       = service.open(this.confirmBoxBelonging);\n            return confirmBoxController.afterClosed$;\n        }\n        \n    }\n    \n    export class Settings {\n        Buttons: GlobalInterface.IButton[]                      = [];\n        ConfirmBoxCoreConfig: ConfirmBoxInterface.IConfirmBoxCoreConfig = new ConfirmBoxCoreConfig();\n        Message: GlobalInterface.IMessage                       = new GlobalClass.Message();\n    }\n    \n    export class ConfirmBoxCoreConfig implements ConfirmBoxInterface.IConfirmBoxCoreConfig {\n        Width: string                     = null;\n        Height: string                    = null;\n        ButtonPosition: VerticalPosition  = null;\n        LayoutType: DialogLayoutDisplay   = null;\n        Message: GlobalInterface.IMessage = null;\n        ConfirmLabel: string              = null;\n        DeclineLabel: string              = null;\n    }\n    \n    export class ConfirmBoxBelonging extends ConfirmBoxClass.Settings implements ConfirmBoxInterface.IConfirmBoxBelonging {\n        \n        EntityUniqueID: string = 'C' + Math.random().toString(36).substr(2, 9);\n        EventsController: ConfirmBoxEventsController;\n        \n        constructor() {\n            super();\n            this.EventsController                                       = new ConfirmBoxEventsController(this.EntityUniqueID);\n            const ConfirmBoxCoreConfigurator: ConfirmBoxConfigService = ServiceLocator.injector.get(ConfirmBoxConfigService);\n            const baseSettings                                          = new ConfirmBoxClass.Settings();\n            const dataControl                                           = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(ConfirmBoxCoreConfigurator.productionConfig.ConfirmBoxCoreConfig, baseSettings.ConfirmBoxCoreConfig);\n            this.ConfirmBoxCoreConfig = baseSettings.ConfirmBoxCoreConfig;\n            this.Buttons          = ConfirmBoxCoreConfigurator.productionConfig.Buttons.slice();\n        }\n        \n    }\n    \n    \n}\n","import {AfterViewInit, ChangeDetectorRef, Component} from '@angular/core';\nimport {ToastNotificationClass} from '../core/model';\nimport {Observable, Observer} from 'rxjs';\nimport {delay} from 'rxjs/operators';\nimport {fadeInOut} from '../../../core/animations';\nimport {GlobalInterface} from '../../../core/global';\n\n@Component({\n    selector   : 'app-toast-notification-wrapper',\n    templateUrl: './toast-notification-wrapper.component.html',\n    styleUrls  : ['./toast-notification-wrapper.component.scss'],\n    animations : [fadeInOut(0, 1)]\n})\nexport class ToastNotificationWrapperComponent implements AfterViewInit {\n    fadeInOutAnimation: string = 'open';\n    \n    constructor(public toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging, private cd: ChangeDetectorRef) {\n    }\n    \n    ngAfterViewInit(): void {\n        this.setResponse(false);\n        this.cd.detectChanges();\n        this.autoClose();\n    }\n    \n    setResponse(_IsSuccess: boolean, _ClickedButtonID?: string): void {\n        const response = new ToastNotificationClass.ToastNotificationDefaultResponse();\n        if (_ClickedButtonID) {\n            response.ClickedButtonID = _ClickedButtonID;\n        }\n        \n        response.setSuccess(_IsSuccess);\n        response.setBelonging(this.toastNotificationBelonging);\n        this.toastNotificationBelonging.EventsController.setDefaultResponse(response);\n    }\n    \n    onOverlayClicked(evt: MouseEvent): void {\n        // console.log('onOverlayClicked');\n    }\n    \n    onToastClicked(evt: MouseEvent): void {\n        // console.log('onOverlayClicked');\n    }\n    \n    \n    onCustomButton(_Button: GlobalInterface.IButton): void {\n        this.toastNotificationBelonging.EventsController.onButtonClick(_Button);\n        this.setResponse(true, _Button.ID);\n        this.toastNotificationBelonging.EventsController.close();\n    }\n    \n    onButtonClick(_Type: 'confirm' | 'decline') {\n        this.setResponse(_Type === 'confirm');\n        this.toastNotificationBelonging.EventsController.close();\n    }\n    \n    autoClose() {\n        if (this.toastNotificationBelonging.ToastCoreConfig.AutoCloseDelay\n            && !(this.toastNotificationBelonging.Buttons.length\n            || this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel\n            || this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel)\n        ) {\n            setTimeout(() => {\n                this.closeParent$('close-slow').subscribe( resp =>{\n                    this.toastNotificationBelonging.EventsController.close();\n                });\n                \n            }, this.toastNotificationBelonging.ToastCoreConfig.AutoCloseDelay);\n        }\n    }\n    \n    closeParent$(_ClosingAnimation: string): Observable<any> {\n        this.fadeInOutAnimation = _ClosingAnimation;\n        const timer             = _ClosingAnimation === 'close-slow' ? 1400 : 150;\n        \n        return new Observable((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        }).pipe(delay(timer));\n    }\n\n    \n    close() {\n        this.toastNotificationBelonging.EventsController.close();\n    }\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {ToastNotificationClass, ToastNotificationInterface} from './model';\nimport {GlobalClass} from '../../../core/global';\nimport {DialogLayoutDisplay} from '../../../core/enums';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ToastNotificationConfigService {\n    \n    authorConfig: ToastNotificationInterface.IToastNotificationUserConfig     = new ToastNotificationClass.Settings();\n    productionConfig: ToastNotificationInterface.IToastNotificationUserConfig = new ToastNotificationClass.Settings();\n    \n    \n    constructor(@Inject('toastNotificationConfig') private userConfig: ToastNotificationInterface.IToastNotificationUserConfig = {}) {\n        \n        // region *** confirmBox userConfig (user input app-module) ***\n        const userConfigBase = new ToastNotificationClass.Settings();\n        const dataControl    = new GlobalClass.DataControl();\n        dataControl.copyValuesFrom(userConfig.ToastCoreConfig, userConfigBase.ToastCoreConfig); // this will make sure that object has right properties\n        \n        userConfig.ToastCoreConfig = userConfigBase.ToastCoreConfig;\n        // endregion\n        \n        // region *** author default config values (if there is no user input) ***\n        this.authorConfig.ToastCoreConfig.Width          = 'auto';\n        this.authorConfig.ToastCoreConfig.Height         = 'auto';\n        this.authorConfig.ToastCoreConfig.ButtonPosition = 'right';\n        // this.authorConfig.ToastCoreConfig.ConfirmLabel   = 'Confirm';\n        // this.authorConfig.ToastCoreConfig.DeclineLabel   = 'Decline';\n        this.authorConfig.ToastCoreConfig.AutoCloseDelay       = 2500;\n        this.authorConfig.ToastCoreConfig.LayoutType           = DialogLayoutDisplay.NONE;\n        this.authorConfig.GlobalSettings.AllowedMessagesAtOnce = 5;\n\n        // endregion\n        \n        // region *** Production setup ***\n        \n        dataControl.copyValuesFrom(this.authorConfig.GlobalSettings, this.productionConfig.GlobalSettings);\n        dataControl.copyValuesFrom(userConfig.GlobalSettings, this.productionConfig.GlobalSettings);\n        dataControl.copyValuesFrom(this.authorConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);\n        dataControl.copyValuesFrom(userConfig.ToastCoreConfig, this.productionConfig.ToastCoreConfig);\n        // endregion\n    }\n}\n","import {ApplicationRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, Injector} from '@angular/core';\nimport {ToastNotificationWrapperComponent} from '../toast-notification-wrapper/toast-notification-wrapper.component';\nimport {ToastNotificationClass, ToastNotificationInterface} from './model';\nimport {DialogInjector} from '../../../core/dialog-injector';\nimport {map} from 'rxjs/operators';\nimport {ToastNotificationConfigService} from './toast-notification-config.service';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ToastNotificationService {\n    \n    toastComponentRefList: ComponentRef<ToastNotificationWrapperComponent>[]                  = [];\n    bufferToastRawList: ToastNotificationInterface.IToastNotificationRawState[]               = [];\n    bufferCheckingIntervalIsReady: boolean                                                    = true;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef, private toastConfig: ToastNotificationConfigService) {\n    }\n    \n    openToast$(_ToastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging): Observable<ToastNotificationInterface.IPrivateResponseMerged> {\n        let eventController = _ToastNotificationBelonging.EventsController;\n        // console.log(`%c ${_ToastNotificationBelonging.EntityUniqueID} `, `background: #339933; color: #fff`);\n        \n        const toastRawInstance = this.prepareRawToast(eventController, _ToastNotificationBelonging);\n        this.listeners(eventController);\n        this.internalRouting(toastRawInstance);\n        return eventController.afterClosed$;\n    }\n    \n    internalRouting(_ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState): boolean {\n        if (this.isRefListAvailable()) {\n            this.sendToProduction(_ToastRawInstance);\n            return true;\n        } else {\n            this.sendToBuffer(_ToastRawInstance);\n            return false;\n        }\n    }\n    \n    sendToBuffer(_ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState) {\n        this.bufferToastRawList.push(_ToastRawInstance);\n    }\n    \n    sendToProduction(_ToastRawInstance: ToastNotificationInterface.IToastNotificationRawState): void {\n        const componentRef = this.getComponentRef(_ToastRawInstance);\n        if (componentRef) {\n            this.toastComponentRefList.push(componentRef);\n            componentRef.instance.toastNotificationBelonging = _ToastRawInstance.ToastBelonging;\n            this.appendToBodyParentComponent(componentRef);\n            \n        }\n    }\n \n    isRefListAvailable(): boolean {\n        return this.toastComponentRefList.length < this.toastConfig.productionConfig.GlobalSettings.AllowedMessagesAtOnce;\n    }\n    \n    prepareRawToast(_EventsController: ToastNotificationClass.ToastNotificationEventsController, _ToastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging): ToastNotificationInterface.IToastNotificationRawState {\n        \n        const weakMap = new WeakMap();\n        weakMap.set(ToastNotificationClass.ToastNotificationEventsController, _EventsController);\n        \n        return {\n            WeakMap       : weakMap,\n            ToastBelonging: _ToastNotificationBelonging\n        };\n    }\n    \n    getComponentRef(_ToastNotificationRawState: ToastNotificationInterface.IToastNotificationRawState): ComponentRef<any> | null {\n        \n        const dialogIndex = this.findDialogIndex(_ToastNotificationRawState.ToastBelonging.EntityUniqueID);\n        if (dialogIndex === -1) {\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ToastNotificationWrapperComponent);\n            return componentFactory.create(new DialogInjector(this.injector, _ToastNotificationRawState.WeakMap));\n        }\n        return null;\n    }\n    \n    listeners(_EventsController: ToastNotificationClass.ToastNotificationEventsController) {\n        \n        // Listener for closing dialog\n        const closeDialogSubscription = _EventsController.afterClosed$.subscribe((response) => {\n            \n            // this.removeFromBodyParentComponent(modalIndex);\n            this.removeFromBody(response.toastNotificationBelonging.EntityUniqueID);\n            closeDialogSubscription.unsubscribe();\n        });\n    }\n    \n    appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n        // attach view to ignite lifecycle hooks\n        this.appRef.attachView(_ComponentRef.hostView);\n        // DOM\n        const domElem                 = (_ComponentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        const targetNode: HTMLElement = document.getElementById('toast-wrapper');\n        const toastEntity             = document.createElement('div');\n        toastEntity.setAttribute('id', _ComponentRef.instance.toastNotificationBelonging.EntityUniqueID);\n        toastEntity.className = 'toast-entity';\n        toastEntity.prepend(domElem);\n        // targetNode.prepend(toastEntity);\n        setTimeout(()=> {\n            targetNode.appendChild(toastEntity);\n        }, 200);\n        \n        \n    }\n    \n    removeFromBody(_EntityUniqueID: string): void {\n        \n        const modalIndex = this.findDialogIndex(_EntityUniqueID);\n        if (modalIndex > -1) {\n            \n            if (this.bufferToastRawList.length) {\n                this.sendToProduction(this.bufferToastRawList[0]);\n                this.bufferToastRawList.splice(0, 1);\n                \n            }\n            \n            this.toastComponentRefList[modalIndex].instance.closeParent$('close-fast').pipe(map(item => {\n                const modalIndex = this.findDialogIndex(_EntityUniqueID);\n                if (this.toastComponentRefList[modalIndex]) {\n                    const toastEntity = document.getElementById(this.toastComponentRefList[modalIndex].instance.toastNotificationBelonging.EntityUniqueID);\n                    toastEntity.remove();\n                    // console.log(`%c ${this.toastComponentRefList[modalIndex].instance.toastNotificationBelonging.EntityUniqueID} `, `background: #cc3333; color: #fff`);\n                    this.appRef.detachView(this.toastComponentRefList[modalIndex].hostView);\n                    this.toastComponentRefList[modalIndex].destroy();\n                    this.toastComponentRefList.splice(modalIndex, 1);\n                }\n            })).subscribe();\n        }\n    }\n\n    findDialogIndex(_DialogUniqueID: string): number {\n        return this.toastComponentRefList.findIndex((item) => {\n            return _DialogUniqueID === item.instance.toastNotificationBelonging.EntityUniqueID;\n        });\n    }\n}\n","import {Observable, Subject} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {GlobalClass, GlobalInterface} from '../../../core/global';\nimport {ServiceLocator} from '../../../locator.service';\nimport {DialogLayoutDisplay, VerticalPosition} from '../../../core/enums';\nimport {ToastNotificationService} from './toast-notification.service';\nimport {ToastNotificationConfigService} from './toast-notification-config.service';\n\n\nexport namespace ToastNotificationInterface {\n    \n    export interface IToastNotificationUserConfig {\n        Buttons?: GlobalInterface.IButton[];\n        ToastCoreConfig?: ToastNotificationInterface.IToastCoreConfig;\n        Message?: GlobalInterface.IMessage;\n        GlobalSettings?: ToastNotificationInterface.IGlobalToastSettings;\n    }\n    \n    export interface IGlobalToastSettings {\n        /** Number of popups allowed on screen, recommend 3-5 */\n        AllowedMessagesAtOnce: number;\n    }\n    \n    export interface IToastCoreConfig {\n        /** Fixed popup width */\n        Width?: string;\n        /** Fixed popup height */\n        Height?: string;\n        ButtonPosition?: VerticalPosition;\n        LayoutType?: DialogLayoutDisplay;\n        Message?: GlobalInterface.IMessage;\n        /** Default confirm button Label */\n        ConfirmLabel?: string;\n        /** Default decline button Label */\n        DeclineLabel?: string;\n        /** Expressed in milliseconds */\n        AutoCloseDelay?: number;\n    }\n    \n    export interface IToastNotificationBelonging {\n        Buttons: GlobalInterface.IButton[];\n        ToastCoreConfig: ToastNotificationInterface.IToastCoreConfig;\n        EntityUniqueID: string;\n        EventsController: ToastNotificationClass.ToastNotificationEventsController;\n    }\n    \n    export interface IToastNotificationResponse {\n        setSuccess(_IsSuccess: boolean): void;\n        setClickedButtonID(_ClickedButtonID): void;\n        \n    }\n    \n    export interface IToastNotificationPublicResponse {\n        Success: boolean;\n        ClickedButtonID: string\n    }\n    \n    export interface IPrivateResponseMerged extends IToastNotificationResponse, GlobalInterface.IPrivateResponse {\n        \n        toastNotificationBelonging: ToastNotificationInterface.IToastNotificationBelonging;\n    }\n    \n    export interface IToastNotificationRawState {\n        WeakMap: WeakMap<any, ToastNotificationClass.ToastNotificationEventsController>;\n        ToastBelonging: ToastNotificationClass.ToastNotificationBelonging;\n    }\n    \n}\n\nexport namespace ToastNotificationClass {\n    \n    // region *** Public ***\n    export class ToastNotificationInitializer {\n        \n        private toastNotificationCarrier: ToastNotificationClass.ToastNotificationCarrier = new ToastNotificationClass.ToastNotificationCarrier();\n        \n        constructor() {\n        }\n        \n        openToastNotification$(): Observable<ToastNotificationInterface.IToastNotificationPublicResponse> {\n            return this.toastNotificationCarrier.openToastNotification$().pipe(map(resp => {\n                const basicToastNotificationResponse = new ToastNotificationResponse();\n                const dataControl                    = new GlobalClass.DataControl();\n                dataControl.copyValuesFrom(resp, basicToastNotificationResponse);\n                return basicToastNotificationResponse;\n            }));\n        }\n        \n        setButtons(_Buttons: GlobalInterface.IButton[]): void {\n            this.toastNotificationCarrier.setButtons(_Buttons);\n        }\n        \n        setConfig(_ToastNotificationConfig: ToastNotificationInterface.IToastCoreConfig) {\n            this.toastNotificationCarrier.setConfig(_ToastNotificationConfig);\n        }\n        \n        setMessage(_Title: string, _Description: string = null): void {\n            this.toastNotificationCarrier.setTitle(_Title);\n            this.toastNotificationCarrier.setDescription(_Description);\n        }\n        \n        setTitle(_Title: string): void {\n            this.toastNotificationCarrier.setTitle(_Title);\n        }\n        \n        setDescription(_Description: string): void {\n            this.toastNotificationCarrier.setDescription(_Description);\n        }\n        \n        setButtonLabels(_Confirm: string, _Decline?: string): void {\n            this.toastNotificationCarrier.setButtonLabels(_Confirm, _Decline);\n        }\n        \n    }\n    \n    export class ToastNotificationResponse extends GlobalClass.DataControl implements ToastNotificationInterface.IToastNotificationResponse, ToastNotificationInterface.IToastNotificationPublicResponse {\n        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n        \n        Success: boolean        = null;\n        ClickedButtonID: string = null;\n        \n        constructor() {\n            super();\n        }\n        \n        setSuccess(_IsSuccess: boolean): void {\n            this.Success = _IsSuccess;\n        }\n        \n        setClickedButtonID(_ClickedButtonID): void {\n            this.ClickedButtonID = _ClickedButtonID;\n        }\n        \n        \n    }\n    \n    export class ToastNotificationEventsController {\n        \n        defaultResponse: ToastNotificationInterface.IPrivateResponseMerged;\n        \n        private readonly _afterClosed: Subject<ToastNotificationInterface.IPrivateResponseMerged> = new Subject<ToastNotificationInterface.IPrivateResponseMerged>();\n        afterClosed$: Observable<ToastNotificationInterface.IPrivateResponseMerged>               = this._afterClosed.asObservable();\n        private readonly _onButtonClick: Subject<GlobalInterface.IButton>                         = new Subject<GlobalInterface.IButton>();\n        onButtonClick$: Observable<GlobalInterface.IButton>                                       = this._onButtonClick.asObservable();\n        private readonly _buttonList: Subject<GlobalInterface.IButton[]>                          = new Subject<GlobalInterface.IButton[]>();\n        buttonList$: Observable<GlobalInterface.IButton[]>                                        = this._buttonList.asObservable();\n        \n        constructor(private EntityUniqueID: string) {\n        }\n        \n        \n        close(_Response?: ToastNotificationInterface.IPrivateResponseMerged): void {\n            const response = _Response ? _Response : this.defaultResponse;\n            this._afterClosed.next(response);\n        }\n        \n        onButtonClick(_Button: GlobalInterface.IButton): void {\n            this.defaultResponse.setClickedButtonID(_Button.ID);\n            this._onButtonClick.next(_Button);\n        }\n        \n        setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n            this._buttonList.next(_ButtonList);\n        }\n        \n        setDefaultResponse(_Response: ToastNotificationInterface.IPrivateResponseMerged): void {\n            this.defaultResponse = _Response;\n        }\n    }\n    \n    // endregion\n    \n    export class ToastNotificationDefaultResponse extends ToastNotificationResponse implements ToastNotificationInterface.IPrivateResponseMerged {\n        toastNotificationBelonging: ToastNotificationBelonging = null;\n        \n        constructor() {\n            super();\n        }\n        \n        setBelonging(_ToastNotificationBelonging): void {\n            this.toastNotificationBelonging = _ToastNotificationBelonging;\n        }\n        \n    }\n    \n    export class ToastNotificationCarrier {\n        \n        toastNotificationBelonging: ToastNotificationClass.ToastNotificationBelonging = new ToastNotificationClass.ToastNotificationBelonging();\n        \n        constructor() {\n        }\n        \n        setButtons(_Buttons: GlobalInterface.IButton[]) {\n            if (_Buttons.length) {\n                this.toastNotificationBelonging.Buttons = _Buttons;\n            }\n        }\n        \n        setTitle(_Title: string): void {\n            this.toastNotificationBelonging.Message.Title = _Title;\n        }\n        \n        setDescription(_Description: string): void {\n            this.toastNotificationBelonging.Message.Description = _Description;\n        }\n        \n        setButtonLabels(_Confirm: string, _Decline: string): void {\n            this.toastNotificationBelonging.ToastCoreConfig.ConfirmLabel = _Confirm;\n            this.toastNotificationBelonging.ToastCoreConfig.DeclineLabel = _Decline;\n        }\n        \n        setConfig(_ToastNotificationBelonging: ToastNotificationInterface.IToastCoreConfig) {\n            // region *** local UserConfig (defined on place where dialog is called) ***\n            const dataControl = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(_ToastNotificationBelonging, this.toastNotificationBelonging.ToastCoreConfig);\n            // endregion\n        }\n        \n        openToastNotification$(): Observable<ToastNotificationInterface.IPrivateResponseMerged> {\n            if(!this.toastNotificationBelonging.Message.Title\n                && !this.toastNotificationBelonging.Message.Description){\n                throw Error('Toast message fail.')\n            }\n            const service: ToastNotificationService = ServiceLocator.injector.get(ToastNotificationService);\n            return service.openToast$(this.toastNotificationBelonging);\n            \n        }\n        \n    }\n    \n    export class GlobalToastSettings implements ToastNotificationInterface.IGlobalToastSettings{\n        AllowedMessagesAtOnce: number = null;\n    }\n    \n    export class Settings {\n        Buttons: GlobalInterface.IButton[]                                           = [];\n        ToastCoreConfig: ToastNotificationInterface.IToastCoreConfig = new ToastCoreConfig();\n        Message: GlobalInterface.IMessage                                            = new GlobalClass.Message();\n        GlobalSettings: GlobalToastSettings                                          = new GlobalToastSettings();\n        \n    }\n    \n    export class ToastCoreConfig implements ToastNotificationInterface.IToastCoreConfig {\n        Width: string                     = null;\n        Height: string                    = null;\n        ButtonPosition: VerticalPosition  = null;\n        LayoutType: DialogLayoutDisplay   = null;\n        Message: GlobalInterface.IMessage = null;\n        ConfirmLabel: string              = null;\n        DeclineLabel: string              = null;\n        AutoCloseDelay?: number           = null;\n    }\n    \n    export class ToastNotificationBelonging extends ToastNotificationClass.Settings implements ToastNotificationInterface.IToastNotificationBelonging {\n        \n        EntityUniqueID: string = 'T' + Math.random().toString(36).substr(2, 9);\n        EventsController: ToastNotificationEventsController;\n        \n        constructor() {\n            super();\n            this.EventsController                                               = new ToastNotificationEventsController(this.EntityUniqueID);\n            const toastNotificationConfigurator: ToastNotificationConfigService = ServiceLocator.injector.get(ToastNotificationConfigService);\n            const baseSettings                                                  = new ToastNotificationClass.Settings();\n            const dataControl                                                   = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(toastNotificationConfigurator.productionConfig.ToastCoreConfig, baseSettings.ToastCoreConfig);\n            this.ToastCoreConfig = baseSettings.ToastCoreConfig;\n            this.Buttons                 = toastNotificationConfigurator.productionConfig.Buttons.slice();\n        }\n        \n    }\n    \n    \n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ed-default-loader',\n  templateUrl: './default-loader.component.html',\n  styleUrls: ['./default-loader.component.scss']\n})\nexport class DefaultLoaderComponent {\n\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {DialogClass, DialogInterface} from './model';\nimport {DialogLayoutDisplay} from '../../../core/enums';\nimport {DefaultLoaderComponent} from '../../../default-loader/default-loader.component';\nimport {GlobalClass} from '../../../core/global';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DialogConfigService {\n    \n    authorConfig: DialogInterface.IDialogUserConfig     = new DialogClass.DialogSettings();\n    productionConfig: DialogInterface.IDialogUserConfig = new DialogClass.DialogSettings();\n    \n    constructor(@Inject('dialogConfig') private userConfig: DialogInterface.IDialogUserConfig = {}) {\n        \n        // region *** dialog userConfig (user input app-module) ***\n        const userConfigBase = new DialogClass.DialogSettings();\n        const dataControl    = new GlobalClass.DataControl();\n        dataControl.copyValuesFrom(userConfig.DialogCoreConfig, userConfigBase.DialogCoreConfig); // this will make sure that object has right properties\n        userConfig.DialogCoreConfig = userConfigBase.DialogCoreConfig;\n        \n        if (userConfig.DialogCoreConfig.LoaderComponent !== null) {\n            userConfig.DialogCoreConfig.DisplayLoader = userConfig.DialogCoreConfig.DisplayLoader === null;\n        }\n        // endregion\n        \n        // region *** author default config values (if there is no user input) ***\n        this.authorConfig.DialogCoreConfig.Width           = 'auto';\n        this.authorConfig.DialogCoreConfig.Height          = 'auto';\n        this.authorConfig.DialogCoreConfig.ButtonPosition  = 'right';\n        this.authorConfig.DialogCoreConfig.DisplayLoader   = false;\n        this.authorConfig.DialogCoreConfig.LayoutType      = DialogLayoutDisplay.NONE;\n        this.authorConfig.DialogCoreConfig.LoaderComponent = DefaultLoaderComponent;\n        // endregion\n        \n        dataControl.copyValuesFrom(this.authorConfig.DialogCoreConfig, this.productionConfig.DialogCoreConfig);\n        dataControl.copyValuesFrom(userConfig.DialogCoreConfig, this.productionConfig.DialogCoreConfig);\n        \n        // Buttons\n        /*if(userConfig.Buttons){\n            this.config.Buttons.push(\n                new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY)\n                ,new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n            );\n        }*/\n        \n    }\n}\n","import {Directive, ViewContainerRef} from '@angular/core';\n\n\n@Directive({\n    selector: '[appInsertion]',\n})\nexport class InsertionDirective {\n    \n    constructor(\n        public viewContainerRef: ViewContainerRef) {\n    }\n    \n}\n","import {Directive, ViewContainerRef} from '@angular/core';\n\n\n@Directive({\n    selector: '[appInsertionLoader]',\n})\nexport class InsertionLoaderDirective {\n    \n    constructor(\n        public viewContainerRef: ViewContainerRef) {\n    }\n    \n}\n","import {AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, OnDestroy, Type, ViewChild} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\nimport {InsertionDirective} from '../../../core/insertion.directive';\nimport {fadeInOut} from '../../../core/animations';\nimport {delay} from 'rxjs/operators';\nimport {InsertionLoaderDirective} from '../../../core/insertion-loader.directive';\nimport {DialogClass} from '../core/model';\n\n\n@Component({\n    selector   : 'dialog-popup-wrapper',\n    templateUrl: './dialog-wrapper.component.html',\n    styleUrls  : ['./dialog-wrapper.component.scss'],\n    animations : [fadeInOut(0, 1)]\n    \n})\nexport class DialogWrapperComponent implements AfterViewInit, OnDestroy {\n    fadeInOutAnimation: string = 'open';\n    showLoader: boolean        = true;\n    \n    childComponentRef: ComponentRef<any>;\n    childComponentType: Type<any>;\n    loaderComponentRef: ComponentRef<any>;\n    \n    @ViewChild(InsertionDirective, {static: true}) insertionPoint: InsertionDirective;\n    @ViewChild(InsertionLoaderDirective, {static: true}) loaderInsertionPoint: InsertionLoaderDirective;\n    \n    constructor(\n        public dialogBelonging: DialogClass.DialogBelonging,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private cd: ChangeDetectorRef\n    ) {\n    }\n    \n    ngAfterViewInit(): void {\n        this.loadChildComponent(this.childComponentType);\n        this.loadLoaderComponent(this.dialogBelonging.DialogCoreConfig.LoaderComponent);\n        this.setDefaultResponse();\n        this.cd.detectChanges();\n    }\n    \n    setDefaultResponse(): void {\n        const dialogResponse = new DialogClass.DialogDefaultResponse();\n        dialogResponse.setSuccess(false);\n        dialogResponse.setBelonging(this.dialogBelonging);\n        this.dialogBelonging.EventsController.setDefaultResponse(dialogResponse);\n    }\n    \n    ngOnDestroy(): void {\n        if (this.childComponentRef) {\n            this.childComponentRef.destroy();\n        }\n        if (this.loaderComponentRef) {\n            this.loaderComponentRef.destroy();\n        }\n    }\n    \n    loadChildComponent(_ComponentType: Type<any>): void {\n        \n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(_ComponentType);\n        \n        const viewContainerRef = this.insertionPoint.viewContainerRef;\n        viewContainerRef.clear();\n        \n        this.childComponentRef = viewContainerRef.createComponent(componentFactory);\n        \n        this.childComponentRef.instance.dialogBelonging = this.dialogBelonging;\n    }\n    \n    loadLoaderComponent(_LoaderRef: Type<any>): void {\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(_LoaderRef);\n        const viewContainerRef = this.loaderInsertionPoint.viewContainerRef;\n        viewContainerRef.clear();\n        \n        this.loaderComponentRef = viewContainerRef.createComponent(componentFactory);\n    }\n    \n    close() {\n        \n        this.dialogBelonging.EventsController.close();\n    }\n    \n    closeParent$(_ClosingAnimation: string): Observable<any> {\n        this.fadeInOutAnimation = _ClosingAnimation;\n        const timer             = _ClosingAnimation === 'close-slow' ? 1400 : 150;\n        \n        return new Observable((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        }).pipe(delay(timer));\n    }\n    \n    onOverlayClicked(evt: MouseEvent): void {\n        // console.log('onOverlayClicked');\n    }\n    \n    onCustomButton(_Button: any): void {\n        this.dialogBelonging.EventsController.onButtonClick(_Button);\n    }\n    \n    closeLoader(): void {\n        this.showLoader = false;\n    }\n    \n}\n","import {ApplicationRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, Injector, Type} from '@angular/core';\nimport {DialogClass, DialogInterface} from './model';\nimport {DialogInjector} from '../../../core/dialog-injector';\nimport {map} from 'rxjs/operators';\nimport {DialogWrapperComponent} from '../dialog-wrapper/dialog-wrapper.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DialogService {\n    \n    dialogParentComponentRefList: ComponentRef<any>[] = [];\n    \n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {\n    }\n    \n    open(_ComponentType: Type<any>, _DialogBelonging: DialogClass.DialogBelonging): DialogInterface.IDialogEventsController {\n        const dialogController = _DialogBelonging.EventsController;\n        const componentRef = this.getComponentRef(dialogController, _DialogBelonging);\n        \n        this.dialogParentComponentRefList.push(componentRef);\n        componentRef.instance.dialogBelonging    = _DialogBelonging;\n        componentRef.instance.childComponentType = _ComponentType;\n        \n        this.appendToBodyParentComponent(componentRef);\n        \n        this.listeners(dialogController);\n        \n        return dialogController;\n        \n    }\n    \n    getComponentRef(_EventsController: DialogInterface.IDialogEventsController, _DialogBelonging: DialogClass.DialogBelonging): ComponentRef<any> | null {\n        let componentFactory;\n        \n        const dialogIndex = this.findDialogIndex(_DialogBelonging.EntityUniqueID);\n        if (dialogIndex === -1) {\n            \n            const weakMap = new WeakMap();\n            weakMap.set(DialogClass.DialogEventsController, _EventsController);\n            \n            componentFactory = this.componentFactoryResolver.resolveComponentFactory(DialogWrapperComponent);\n            return componentFactory.create(new DialogInjector(this.injector, weakMap));\n            \n        }\n        \n        return null;\n    }\n    \n    listeners(_EventsController: DialogInterface.IDialogEventsController) {\n        \n        // Listener for closing dialog\n        const closeDialogSubscription = _EventsController.afterClosed$.subscribe((response) => {\n            const modalIndex = this.findDialogIndex(response.DialogBelonging.EntityUniqueID);\n            this.removeFromBodyDialogWrapperComponent(modalIndex);\n            closeDialogSubscription.unsubscribe();\n        });\n        \n        // Listener for turning off loader\n        const closeLoaderSubscription = _EventsController.afterLoader$.subscribe((_DialogUniqueID: string) => {\n            if (_DialogUniqueID) {\n                const modalIndex = this.findDialogIndex(_DialogUniqueID);\n                if (modalIndex !== -1) {\n                    this.dialogParentComponentRefList[modalIndex].instance.closeLoader();\n                }\n            }\n            \n            closeLoaderSubscription.unsubscribe();\n        });\n        \n    }\n    \n    childComponentResolver() {\n    \n    }\n    \n    appendToBodyParentComponent(_ComponentRef: ComponentRef<any>): void {\n        \n        // attach view to ignite lifecycle hooks\n        this.appRef.attachView(_ComponentRef.hostView);\n        \n        // DOM\n        const domElem = (_ComponentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElem);\n        \n    }\n    \n    closeDialogWrapperComponent(_DialogUniqueID: string) {\n        const modalIndex = this.findDialogIndex(_DialogUniqueID);\n        this.removeFromBodyDialogWrapperComponent(modalIndex);\n    }\n    \n    removeFromBodyDialogWrapperComponent(_DialogIndex: number): void {\n        if (_DialogIndex > -1) {\n            this.dialogParentComponentRefList[_DialogIndex].instance.closeParent$('close-fast').pipe(map(item => {\n                this.appRef.detachView(this.dialogParentComponentRefList[_DialogIndex].hostView);\n                this.dialogParentComponentRefList[_DialogIndex].destroy();\n                this.dialogParentComponentRefList.splice(_DialogIndex, 1);\n            })).subscribe();\n        }\n    }\n    \n    findDialogIndex(_DialogUniqueID: string): number {\n        return this.dialogParentComponentRefList.findIndex((item) => {\n            return _DialogUniqueID === item.instance.dialogBelonging.EntityUniqueID;\n        });\n    }\n}\n","import {Observable, Subject} from 'rxjs';\nimport {Type} from '@angular/core';\nimport {ServiceLocator} from '../../../locator.service';\nimport {DialogConfigService} from './dialog-config.service';\nimport {DialogLayoutDisplay, VerticalPosition} from '../../../core/enums';\nimport {map} from 'rxjs/operators';\nimport {GlobalClass, GlobalInterface} from '../../../core/global';\nimport {DialogService} from './dialog.service';\n\nexport namespace DialogInterface {\n    \n    /**\n     * Check interface of properties.\n     */\n    export interface IDialogUserConfig {\n        Buttons?: GlobalInterface.IButton[];\n        DialogCoreConfig?: DialogInterface.IDialogCoreConfig;\n    }\n    \n    /**\n     * Optional user configuration.\n     *\n     * Example:\n     * ```typescript\n     * // Dialog core config object example.\n     * const dialogCoreConfig = {\n     *     DialogCoreConfig: {\n     *        Width         : '500px',\n     *        Height        : '500px',\n     *        ButtonPosition: 'right',\n     *        LayoutType: DialogLayoutDisplay.INFO,\n     *        LoaderComponent: // Any Angular component class name can be included as a loader.\n     *        DisplayLoader: false // This will override LoaderComponent.\n     *     }\n     *  }\n     * ```\n     */\n    export interface IDialogCoreConfig {\n        /** Fixed popup width */\n        Width?: string;\n        /** Fixed popup height */\n        Height?: string;\n        ButtonPosition?: VerticalPosition;\n        LayoutType?: DialogLayoutDisplay;\n        DisplayLoader?: boolean;\n        LoaderComponent?: Type<any>;\n    }\n    \n    export interface IDialogBelonging {\n        Buttons: GlobalInterface.IButton[];\n        DialogCoreConfig: DialogInterface.IDialogCoreConfig;\n        EntityUniqueID: string;\n        CustomData: any;\n        EventsController: DialogInterface.IDialogEventsController;\n    }\n    \n    export interface IDialogEventsController {\n        /** @internal */\n        defaultResponse: DialogInterface.IPrivateResponseMerged;\n        /** @internal */\n        afterClosed$: Observable<DialogInterface.IPrivateResponseMerged>;\n        /** @internal */\n        afterLoader$: Observable<string>;\n        /** @internal */\n        onButtonClick$: Observable<GlobalInterface.IButton>;\n        /** @internal */\n        buttonList$: Observable<GlobalInterface.IButton[]>;\n        \n        close(_Response?: DialogInterface.IPrivateResponseMerged): void;\n        \n        onButtonClick(_Button: GlobalInterface.IButton): void;\n        \n        setButtonList(_ButtonList: GlobalInterface.IButton[]): void;\n        \n        closeLoader(): void;\n        \n        setDefaultResponse(_Response: DialogInterface.IPrivateResponseMerged): void;\n    }\n    \n    export interface IDialogResponse {\n        \n        setPayload(_Payload: any): void;\n        \n        setSuccess(_IsSuccess: boolean): void;\n        \n        setClickedButtonID(_ClickedButtonID): void;\n        \n    }\n    \n    export interface IDialogPublicResponse<ResponsePayload> {\n        /** Generic property type, accept expected payload from dynamic child component. */\n        Payload: ResponsePayload;\n        Success: boolean;\n        ClickedButtonID: string\n    }\n    \n    export interface IPrivateResponseMerged extends IDialogResponse, GlobalInterface.IPrivateResponse {\n        \n        DialogBelonging: DialogInterface.IDialogBelonging;\n    }\n    \n    \n}\n\nexport namespace DialogClass {\n    \n    // region *** Public ***\n    \n    export class DialogInitializer {\n        \n        private dialogCarrier: DialogCarrier = new DialogClass.DialogCarrier();\n        \n        constructor(private component: Type<any>) {\n            this.dialogCarrier.setComponent(this.component);\n        }\n        \n        /** Generic method accept expected payload from dynamic child component.*/\n        openDialog$<ResponsePayload = any>(): Observable<DialogInterface.IDialogPublicResponse<ResponsePayload>> {\n            return this.dialogCarrier.openDialog$().pipe(map(resp => {\n                const basicDialogResponse = new DialogResponse();\n                const dataControl         = new GlobalClass.DataControl();\n                dataControl.copyValuesFrom(resp, basicDialogResponse);\n                return basicDialogResponse;\n            }));\n        }\n        \n        /** It accepts list of custom buttons */\n        setButtons(_Buttons: GlobalInterface.IButton[]): void {\n            this.dialogCarrier.setButtons(_Buttons);\n        }\n        \n        setCustomData(_CustomData: any) {\n            this.dialogCarrier.setCustomData(_CustomData);\n        }\n        \n        setConfig(_DialogConfig: DialogInterface.IDialogCoreConfig) {\n            this.dialogCarrier.setConfig(_DialogConfig);\n        }\n        \n    }\n    \n    export class DialogResponse extends GlobalClass.DataControl implements DialogInterface.IDialogResponse, DialogInterface.IDialogPublicResponse<any> {\n        // private Response: DialogPrepareResponse            = new DialogPrepareResponse();\n        \n        Payload: any            = null;\n        Success: boolean        = null;\n        ClickedButtonID: string = null;\n        \n        constructor() {\n            super();\n        }\n        \n        /**\n         * @ignore\n         */\n        setPayload(_Payload: any): void {\n            this.Payload = _Payload;\n        }\n        \n        /**\n         * @ignore\n         */\n        setSuccess(_IsSuccess: boolean): void {\n            this.Success = _IsSuccess;\n        }\n        \n        /**\n         * @ignore\n         */\n        setClickedButtonID(_ClickedButtonID): void {\n            this.ClickedButtonID = _ClickedButtonID;\n        }\n        \n    }\n    \n    export class DialogEventsController implements DialogInterface.IDialogEventsController {\n        \n        defaultResponse: DialogInterface.IPrivateResponseMerged;\n        \n        private readonly _afterClosed: Subject<DialogInterface.IPrivateResponseMerged> = new Subject<DialogInterface.IPrivateResponseMerged>();\n        afterClosed$: Observable<DialogInterface.IPrivateResponseMerged>               = this._afterClosed.asObservable();\n        \n        private readonly _afterLoader: any                                = new Subject<string>();\n        afterLoader$: Observable<string>                                  = this._afterLoader.asObservable();\n        private readonly _onButtonClick: Subject<GlobalInterface.IButton> = new Subject<GlobalInterface.IButton>();\n        onButtonClick$: Observable<GlobalInterface.IButton>               = this._onButtonClick.asObservable();\n        private readonly _buttonList: Subject<GlobalInterface.IButton[]>  = new Subject<GlobalInterface.IButton[]>();\n        buttonList$: Observable<GlobalInterface.IButton[]>                = this._buttonList.asObservable();\n        \n        constructor(private EntityUniqueID: string) {\n        }\n        \n        close(_Response?: DialogInterface.IPrivateResponseMerged): void {\n            const response = _Response ? _Response : this.defaultResponse;\n            this._afterClosed.next(response);\n        }\n        \n        onButtonClick(_Button: GlobalInterface.IButton): void {\n            this.defaultResponse.setClickedButtonID(_Button.ID);\n            this._onButtonClick.next(_Button);\n        }\n        \n        setButtonList(_ButtonList: GlobalInterface.IButton[]): void {\n            this._buttonList.next(_ButtonList);\n        }\n        \n        closeLoader(): void {\n            setTimeout(() => {\n                this._afterLoader.next(this.EntityUniqueID);\n            }, 0);\n            \n        }\n        \n        setDefaultResponse(_Response: DialogInterface.IPrivateResponseMerged): void {\n            this.defaultResponse = _Response;\n        }\n    }\n    \n    // endregion\n    \n    export class DialogDefaultResponse extends DialogResponse implements DialogInterface.IPrivateResponseMerged {\n        DialogBelonging: DialogInterface.IDialogBelonging = null;\n        \n        constructor() {\n            super();\n        }\n        \n        setBelonging(_DialogBelonging): void {\n            this.DialogBelonging = _DialogBelonging;\n        }\n        \n    }\n    \n    export class DialogCarrier {\n        \n        dialogBelonging: DialogBelonging = new DialogBelonging();\n        private component: Type<any>;\n        \n        constructor() {\n        }\n        \n        setComponent(_Component: Type<any>): void {\n            this.component = _Component;\n        }\n        \n        setButtons(_Buttons: GlobalInterface.IButton[]) {\n            if (_Buttons.length) {\n                this.dialogBelonging.Buttons = _Buttons;\n            }\n        }\n        \n        setCustomData(_CustomData: any) {\n            this.dialogBelonging.CustomData = _CustomData;\n        }\n        \n        setConfig(_DialogConfig: DialogInterface.IDialogCoreConfig) {\n            // region *** local UserConfig (defined on place where dialog is called) ***\n            const dataControl = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(_DialogConfig, this.dialogBelonging.DialogCoreConfig);\n            // endregion\n        }\n        \n        openDialog$(): Observable<DialogInterface.IPrivateResponseMerged> {\n            const service: DialogService = ServiceLocator.injector.get(DialogService);\n            const dialogController       = service.open(this.component, this.dialogBelonging);\n            return dialogController.afterClosed$;\n        }\n        \n    }\n    \n    export class DialogCoreConfig implements DialogInterface.IDialogCoreConfig {\n        Width: string                    = null;\n        Height: string                   = null;\n        ButtonPosition: VerticalPosition = null;\n        LayoutType: DialogLayoutDisplay  = null;\n        DisplayLoader: boolean           = null;\n        LoaderComponent: Type<any>       = null;\n    }\n    \n    export class DialogSettings {\n        Buttons: GlobalInterface.IButton[]                  = [];\n        DialogCoreConfig: DialogInterface.IDialogCoreConfig = new DialogCoreConfig();\n    }\n    \n    export class DialogBelonging<CustomData = any> extends DialogSettings implements DialogInterface.IDialogBelonging {\n        \n        /** @internal */\n        EntityUniqueID: string = 'D' + Math.random().toString(36).substr(2, 9);\n        \n        CustomData: CustomData = null;\n        EventsController: DialogInterface.IDialogEventsController;\n        \n        constructor() {\n            super();\n            this.EventsController                         = new DialogEventsController(this.EntityUniqueID);\n            const dialogConfigurator: DialogConfigService = ServiceLocator.injector.get(DialogConfigService);\n            const baseSettings                            = new DialogSettings();\n            const dataControl                             = new GlobalClass.DataControl();\n            dataControl.copyValuesFrom(dialogConfigurator.productionConfig.DialogCoreConfig, baseSettings.DialogCoreConfig);\n            this.DialogCoreConfig = baseSettings.DialogCoreConfig;\n            this.Buttons          = dialogConfigurator.productionConfig.Buttons.slice();\n        }\n        \n    }\n}\n\n\n\n","import {Inject, Injectable} from '@angular/core';\nimport {GlobalClass, GlobalInterface} from './global';\nimport {ColorVariance} from './enums';\nimport IColorProvider = GlobalInterface.IColorProvider;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GlobalConfigService {\n    \n    productionGlobalConfig: GlobalInterface.IGlobalConfig     = new GlobalClass.GlobalConfig();\n    private authorGlobalConfig: GlobalInterface.IGlobalConfig = new GlobalClass.GlobalConfig();\n    \n    constructor(@Inject('globalConfig') private userGlobalConfig: GlobalInterface.IGlobalUserConfig) {\n        \n        \n        // region *** author global config values (if there is no user input) ***\n        this.authorGlobalConfig.DisplayColor.Primary   = null; // new GlobalClass.ColorProvider('#ff9e00');\n        this.authorGlobalConfig.DisplayColor.Secondary = null; // new GlobalClass.ColorProvider('#989ea5');\n        this.authorGlobalConfig.DisplayColor.Success   = null; // new GlobalClass.ColorProvider('#3caea3');\n        this.authorGlobalConfig.DisplayColor.Info      = null; // new GlobalClass.ColorProvider('#2f8ee5');\n        this.authorGlobalConfig.DisplayColor.Warning   = null; // new GlobalClass.ColorProvider('#ffc107');\n        this.authorGlobalConfig.DisplayColor.Danger    = null; // new GlobalClass.ColorProvider('#e46464');\n        this.authorGlobalConfig.DisplayColor.Light     = null; // new GlobalClass.ColorProvider('#f8f9fa');\n        this.authorGlobalConfig.DisplayColor.Dark      = null; // new GlobalClass.ColorProvider('#343a40');\n        // endregion\n        \n        this.productionGlobalConfig.DisplayColor = this.authorGlobalConfig.DisplayColor;\n        \n        // region *** global userConfig (user input app-module) ***\n        this.setUserColors(userGlobalConfig.ColorList);\n        \n        // endregion\n        \n        this.setToastNode();\n        this.setNodeStyles(this.productionGlobalConfig.DisplayColor);\n        \n    }\n    \n    private setNodeStyles(_ProductionColorTypes: GlobalInterface.IColorObject) {\n        \n        Object.keys(_ProductionColorTypes).forEach(key => {\n            if (_ProductionColorTypes[key]) {\n                \n                this.setButtonStyling(key, _ProductionColorTypes[key]);\n                this.setToastStyling(key, _ProductionColorTypes[key]);\n                this.setDialogFrame(key, _ProductionColorTypes[key]);\n                \n                if (ColorVariance[key.toUpperCase()] === ColorVariance.PRIMARY) {\n                    this.getSheet().addRule('.ngx-awesome-popup-overlay', `background:  ${_ProductionColorTypes[key].TransparentDarkenVariance}!important;`);\n                }\n            }\n        });\n        \n    }\n    \n    private setToastStyling(_Key: string, _ColorProvider: IColorProvider) {\n        \n        const baseClass = `.overlay-toast .evolve-toast.${_Key.toLowerCase()}-dialog`;\n        const baseStyle = `\n        background:  ${_ColorProvider.BrightShade}!important;\n        border-color: ${_ColorProvider.Brighten}!important;\n        `;\n        \n        this.getSheet().addRule(baseClass, baseStyle);\n    }\n    \n    private setButtonStyling(_Key: string, _ColorProvider: IColorProvider) {\n        \n        const baseButtonClass = `.ed-btn-${_Key.toLowerCase()}`;\n        const baseStyle       = `\n        color: ${_ColorProvider.ContrastColor}!important;\n        background:  ${_ColorProvider.Base}!important;\n        border-color: ${_ColorProvider.BrightenForShade}!important;\n        `;\n        \n        const hoverButtonClass = `.ed-btn-${_Key.toLowerCase()}:hover`;\n        const hoverStyle       = `\n        background:  ${_ColorProvider.IsBaseBright ? _ColorProvider.DarkenForShade : _ColorProvider.BrightenForShade}!important;\n        border-color: ${_ColorProvider.IsBaseBright ? _ColorProvider.Darken : _ColorProvider.Brighten}!important;\n        `;\n        \n        const focusActiveButtonClass = `.ed-btn-${_Key.toLowerCase()}:focus, .ed-btn-${_Key.toLowerCase()}:active`;\n        const focusActiveStyle       = `\n        box-shadow: 0 0 1px 2px ${_ColorProvider.IsBaseBright ? _ColorProvider.Darken : _ColorProvider.Brighten}!important;\n        `;\n        \n        this.getSheet().addRule(baseButtonClass, baseStyle);\n        this.getSheet().addRule(hoverButtonClass, hoverStyle);\n        this.getSheet().addRule(focusActiveButtonClass, focusActiveStyle);\n        \n    }\n    \n    private setDialogFrame(_Key: string, _ColorProvider: IColorProvider) {\n        \n        const baseDialogFrameClass = `.ngx-awesome-popup-overlay .${_Key.toLowerCase()}-dialog`;\n        const baseStyle            = `\n        border-color: ${_ColorProvider.Brighten}!important;\n        `;\n        \n        this.getSheet().addRule(baseDialogFrameClass, baseStyle);\n        \n    }\n    \n    private getSheet() {\n        // Create the <style> tag\n        let evolveDialogStyleNode = document.getElementById('ngx-awesome-popup-styles') as HTMLStyleElement;\n        if (!evolveDialogStyleNode) {\n            const headNode = document.head || document.getElementsByTagName('head')[0];\n            if (!headNode) {\n                return;\n            }\n            \n            evolveDialogStyleNode = document.createElement('style');\n            evolveDialogStyleNode.setAttribute('id', 'ngx-awesome-popup-styles');\n            evolveDialogStyleNode.appendChild(document.createTextNode(''));\n            headNode.appendChild(evolveDialogStyleNode);\n        }\n        \n        return evolveDialogStyleNode ? evolveDialogStyleNode.sheet : null;\n    };\n    \n    private setToastNode() {\n        const bodyNode = document.body || document.getElementsByTagName('body')[0];\n        if (!bodyNode) {\n            return;\n        }\n        \n        const toastWrapper = document.createElement('div');\n        toastWrapper.setAttribute('id', 'toast-wrapper');\n        toastWrapper.appendChild(document.createTextNode(''));\n        bodyNode.prepend(toastWrapper);\n        // bodyNode.appendChild(toastWrapper);\n    \n    \n        this.getSheet().addRule(`#toast-wrapper`, `position: fixed;\n                                        z-index: 1001;\n                                        top: 20px;\n                                        right: 20px;`);\n        this.getSheet().addRule(`.toast-entity`, `all 0.5s ease;`);\n        this.getSheet().addRule(`.toast-entity:first-child`, `animation: move 0.7s ease-out;`);\n        this.getSheet().addRule(`@-webkit-keyframes move`, `\n                                        0% {margin-top: -5px; opacity: 0.4;}\n                                        30% {margin-top: -4px; opacity: 0.7;}\n                                        100% {margin-top: 0px; opacity: 1;}\n                                        `);\n        this.getSheet().addRule(`@keyframes move`, `\n                                        0% {margin-top: -5px; opacity: 0.4;}\n                                        30% {margin-top: -4px; opacity: 0.7;}\n                                        100% {margin-top: 0px; opacity: 1;}\n                                        `);\n        \n    }\n    \n    private setUserColors(_UserColorTypes: GlobalInterface.IColorTypes): void {\n        \n        if (typeof _UserColorTypes !== 'object') {\n            return;\n        }\n        \n        const userKeys             = Object.keys(_UserColorTypes);\n        const productionObjectKeys = Object.keys(this.productionGlobalConfig.DisplayColor);\n        \n        userKeys.forEach(key => {\n            \n            if (productionObjectKeys.find(tKey => tKey === key)) {\n                const baseColorProvider = new GlobalClass.ColorProvider(_UserColorTypes[key]);\n                if (baseColorProvider.Base) {\n                    \n                    this.productionGlobalConfig.DisplayColor[key] = baseColorProvider;\n                }\n            }\n        });\n        \n    }\n}\n","import {Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ServiceLocator} from './locator.service';\nimport {InsertionDirective} from './core/insertion.directive';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {DialogConfigService} from './types/dialog/core/dialog-config.service';\nimport {DefaultLoaderComponent} from './default-loader/default-loader.component';\nimport {InsertionLoaderDirective} from './core/insertion-loader.directive';\nimport {GlobalConfigService} from './core/global-config.service';\nimport {GlobalInterface} from './core/global';\nimport {ConfirmBoxWrapperComponent} from './types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component';\nimport {ConfirmBoxConfigService} from './types/confirm-box/core/confirm-box-config.service';\nimport {ConfirmBoxClass, ConfirmBoxInterface} from './types/confirm-box/core/model';\nimport {DialogClass, DialogInterface} from './types/dialog/core/model';\nimport {ConfirmBoxService} from './types/confirm-box/core/confirm-box-service';\nimport {ToastNotificationWrapperComponent} from './types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component';\nimport {ToastNotificationClass, ToastNotificationInterface} from './types/toast-notification/core/model';\nimport {ToastNotificationConfigService} from './types/toast-notification/core/toast-notification-config.service';\nimport {ToastNotificationService} from './types/toast-notification/core/toast-notification.service';\nimport {DialogWrapperComponent} from './types/dialog/dialog-wrapper/dialog-wrapper.component';\nimport {DialogService} from './types/dialog/core/dialog.service';\n\n@NgModule({\n    declarations: [\n        DialogWrapperComponent,\n        InsertionDirective,\n        InsertionLoaderDirective,\n        DefaultLoaderComponent,\n        ConfirmBoxWrapperComponent,\n        ToastNotificationWrapperComponent\n    ],\n    imports     : [\n        CommonModule,\n        BrowserModule,\n        BrowserAnimationsModule\n    ],\n    providers   : [\n        DialogService,\n        ConfirmBoxService,\n        ToastNotificationService,\n        GlobalConfigService,\n        DialogConfigService,\n        ConfirmBoxConfigService,\n        ToastNotificationConfigService,\n        DialogClass.DialogBelonging,\n        ConfirmBoxClass.ConfirmBoxBelonging,\n        ToastNotificationClass.ToastNotificationBelonging\n    ],\n    entryComponents: [\n        DialogWrapperComponent,\n        DefaultLoaderComponent,\n        ConfirmBoxWrapperComponent,\n        ToastNotificationWrapperComponent\n    ]\n})\n\nexport class NgxAwesomePopupModule {\n    constructor(\n        private injector: Injector,\n        private gConfigService: GlobalConfigService\n    ) {\n        ServiceLocator.injector = injector;\n    }\n    static forRoot(globalConfig?: GlobalInterface.IGlobalUserConfig): ModuleWithProviders<NgxAwesomePopupModule> {\n        return {\n            ngModule: NgxAwesomePopupModule,\n            providers: [GlobalConfigService, {provide: 'globalConfig', useValue: globalConfig}]\n            \n        };\n    }\n    \n}\n\n@NgModule({})\nexport class DialogConfigModule {\n    \n    static forRoot(dialogConfig?: DialogInterface.IDialogUserConfig): ModuleWithProviders<DialogConfigModule> {\n        return {\n            ngModule: DialogConfigModule,\n            providers: [DialogConfigService, {provide: 'dialogConfig', useValue: dialogConfig}]\n          \n        };\n    }\n}\n\n@NgModule({})\nexport class ConfirmBoxConfigModule {\n    \n    static forRoot(confirmBoxConfig?: ConfirmBoxInterface.IConfirmBoxUserConfig): ModuleWithProviders<ConfirmBoxConfigModule> {\n        return {\n            ngModule: ConfirmBoxConfigModule,\n            providers: [ConfirmBoxConfigService, {provide: 'confirmBoxConfig', useValue: confirmBoxConfig}]\n            \n        };\n    }\n}\n@NgModule({})\nexport class ToastNotificationConfigModule {\n    \n    static forRoot(toastNotificationConfig?: ToastNotificationInterface.IToastNotificationUserConfig): ModuleWithProviders<ToastNotificationConfigModule> {\n        return {\n            ngModule: ToastNotificationConfigModule,\n            providers: [ToastNotificationConfigService, {provide: 'toastNotificationConfig', useValue: toastNotificationConfig}]\n            \n        };\n    }\n}\n\n\n","import {GlobalClass, GlobalInterface} from './ngx-awesome-popup/core/global';\nimport {ConfirmBoxClass, ConfirmBoxInterface} from './ngx-awesome-popup/types/confirm-box/core/model';\nimport {ToastNotificationClass, ToastNotificationInterface} from './ngx-awesome-popup/types/toast-notification/core/model';\nimport {DialogClass, DialogInterface} from './ngx-awesome-popup/types/dialog/core/model';\n\nimport IButton = GlobalInterface.IButton;\nimport IMessage = GlobalInterface.IMessage;\nimport IGlobalUserConfig = GlobalInterface.IGlobalUserConfig;\nimport IColorTypes = GlobalInterface.IColorTypes;\nimport ButtonMaker = GlobalClass.ButtonMaker;\n\nimport IConfirmBoxPublicResponse = ConfirmBoxInterface.IConfirmBoxPublicResponse;\nimport IConfirmBoxUserConfig = ConfirmBoxInterface.IConfirmBoxUserConfig;\nimport IConfirmBoxCoreConfig = ConfirmBoxInterface.IConfirmBoxCoreConfig;\nimport ConfirmBoxInitializer = ConfirmBoxClass.ConfirmBoxInitializer;\n\nimport IToastNotificationPublicResponse = ToastNotificationInterface.IToastNotificationPublicResponse;\nimport ToastNotificationInitializer = ToastNotificationClass.ToastNotificationInitializer;\nimport IToastCoreConfig = ToastNotificationInterface.IToastCoreConfig;\nimport IGlobalToastSettings = ToastNotificationInterface.IGlobalToastSettings;\nimport IToastNotificationUserConfig = ToastNotificationInterface.IToastNotificationUserConfig;\n\nimport IDialogEventsController = DialogInterface.IDialogEventsController;\nimport IDialogPublicResponse = DialogInterface.IDialogPublicResponse;\nimport IDialogUserConfig = DialogInterface.IDialogUserConfig;\nimport IDialogCoreConfig = DialogInterface.IDialogCoreConfig;\nimport DialogInitializer = DialogClass.DialogInitializer;\nimport DialogBelonging = DialogClass.DialogBelonging;\n\n// region *** Interface ***\nexport {IGlobalUserConfig};\nexport {IButton};\nexport {IMessage};\nexport {IColorTypes};\n\nexport {IConfirmBoxUserConfig};\nexport {IConfirmBoxCoreConfig};\nexport {IConfirmBoxPublicResponse};\n\nexport {IGlobalToastSettings};\nexport {IToastCoreConfig};\nexport {IToastNotificationUserConfig};\nexport {IToastNotificationPublicResponse};\n\nexport {IDialogUserConfig};\nexport {IDialogCoreConfig};\nexport {IDialogPublicResponse};\nexport {IDialogEventsController};\n// endregion\n\nexport {ButtonLayoutDisplay} from './ngx-awesome-popup/core/enums';\nexport {DialogLayoutDisplay} from './ngx-awesome-popup/core/enums';\nexport {VerticalPosition} from './ngx-awesome-popup/core/enums';\n\n\n/**\n * @returns It will return custom button object ready to be used in child component layout.\n */\nexport {ButtonMaker};\n\n/**\n * This is the class that needs to be added as DI in the constructor of a child component that will be\n * opened dynamically with {@link DialogInitializer}. It contains various information or\n * event controllers, and listeners that can be used in a child component. Also, there is custom data\n * that is sent from component where the {@link DialogInitializer} is. User can set specific type of\n * custom data that child component will receive by including it as generic type.\n *\n *\n * Example:\n * ```typescript\n *import {DialogBelonging} from 'ngx-awesome-popup';\n *@Component({\n *    selector   : 'app-cup',\n *    templateUrl: './cup.component.html',\n *    styleUrls  : ['./cup.component.scss']\n *})\n * export class CupComponent implements OnInit, OnDestroy {\n *\n *    subscriptions: Subscription[] = [];\n *\n *    constructor(private dialogBelonging: DialogBelonging) {\n *    }\n *\n *    ngOnInit(): void {\n *    console.log(this.dialogBelonging);\n *\n *        this.subscriptions.push(\n *            this.dialogBelonging.EventsController.onButtonClick$.subscribe((_Button) => {\n *            if (_Button.ID === 'ok') {\n *                // Do some logic and close popup.\n *                this.dialogBelonging.EventsController.close();\n *            } else if (_Button.ID === 'cancel') {\n *                // Do some logic and close popup.\n *                this.dialogBelonging.EventsController.close();\n *            }\n *        })\n *        );\n *\n *        setTimeout(() => {\n *            // Close loader after async data is ready.\n *            this.dialogBelonging.EventsController.closeLoader();\n *        }, 1000);\n *    }\n *}\n \n ngOnDestroy(): void {\n        // Close all subscriptions.\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n * ```\n * @category child dynamic component data & event controller\n */\nexport {DialogBelonging};\n\n// region *** Observable response after closing popup ***\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport {IToastNotificationPublicResponse as IToastNotificationResponse};\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport {IConfirmBoxPublicResponse as IConfirmBoxResponse};\n/**\n * Regular description\n *\n * @category Observable response after closing popup\n */\nexport {IDialogPublicResponse as IDialogResponse};\n// endregion\n\n// region *** Popup open  ***\n\n/**\n * This is the class that needs to be instantiated to set up and ignite a ToastNotification,\n * its purpose is to show short notification to end-user, or even interact with user.\n * It can be evoked from any angular typescript file.\n *\n * Below is the example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n * // Create the initializer.\n *const newToastNotification = new ToastNotificationInitializer();\n *\n * // Set desired Title.\n *newToastNotification.setTitle('Warning!');\n *\n * // Set desired Description.\n *newToastNotification.setDescription('Form is not valid!');\n *\n * // Set desired configuration.\n *newToastNotification.setConfig({\n *      LayoutType: DialogLayoutDisplay.WARNING\n *   });\n \n * // Open a ToastNotification.\n * newConfirmBox.openConfirmBox$().subscribe(resp => {\n *   console.log('confirmBox response: ', resp);\n *  });\n * ```\n * * IToastCoreConfig: {@link IToastCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * IToastNotificationPublicResponse: {@link IToastNotificationPublicResponse}\n * @category Popup open\n */\nexport {ToastNotificationInitializer};\n/**\n * This is the class that needs to be instantiated to set up and ignite a ConfirmBox and create content.\n * Its purpose is to get confirmation response from end-user. It can be called from any angular\n * typescript file.\n *\n * Below is example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n * // Create the initializer.\n *const newConfirmBox = new ConfirmBoxInitializer();\n *\n * // Set desired message: _Title: string, _Description: string.\n *newConfirmBox.setMessage('Are you sure?', 'That action will delete user!');\n *\n * // Set desired configuration.\n *newConfirmBox.setConfig({\n *      LayoutType: DialogLayoutDisplay.DANGER\n *   });\n *\n * // Set button labels.\n * newConfirmBox.setButtonLabels('YES', 'NO');\n *\n * // Open a ConfirmBox, and get clicked button-id in response.\n * newConfirmBox.openConfirmBox$().subscribe(resp => {\n *   // IConfirmBoxPublicResponse\n *   console.log('confirmBox response: ', resp);\n *  });\n * ```\n * * IConfirmBoxCoreConfig: {@link IConfirmBoxCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * IConfirmBoxPublicResponse: {@link IConfirmBoxPublicResponse}\n * @category Popup open\n */\nexport {ConfirmBoxInitializer};\n/**\n * This is the class that needs to be instantiated to set up and ignite a Dialog and create dynamic component,\n * its purpose is to render any angular component view with specific configuration from any angular typescript file.\n * Dynamic component means that user can evoke the popup from typescript and component view\n * is dynamically created with the Awesome Popup engine. There is no need to call any selector in HTML to create component view.\n *\n * DialogInitializer can send data to child component (dynamic component) where data will be accessible with {@link DialogBelonging}.\n *\n * Below is the example with (some optional) user configuration,\n * it will override default configuration from app.module.\n *\n *\n * Example:\n * ```typescript\n *  import {DialogInitializer, DialogLayoutDisplay, ButtonMaker, ButtonLayoutDisplay} from 'ngx-awesome-popup';<\n *  import {CupComponent} from './cup/cup.component';\n *\n *  const newDialogPopup = new DialogInitializer(CupComponent); // Any Angular component.\n *\n *  // Custom data will be sent to dynamic component available in dialogBelonging object.\n *  newDialogPopup.setCustomData({name: 'John', surname: 'Doe', id: 1});\n *\n *  // Local config settings IDialogCoreConfig.\n *  newDialogPopup.setConfig({\n *      Height: '500px',\n *      LayoutType: DialogLayoutDisplay.INFO,\n *      LoaderComponent: Any Angular component name\n *       });\n *\n *  // Custom buttons, listener is available in child component in dialogBelonging object.\n *  newDialogPopup.setButtons([\n *      new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *      new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *  ]);\n *\n *  // Command to open dialog, it returns observable.\n *  newDialogPopup.openDialog$<any>().subscribe(resp => {\n *           console.log('response: ', resp.Payload);\n *       });\n * ```\n * * IDialogCoreConfig: {@link IDialogCoreConfig}\n * * LayoutType: {@link DialogLayoutDisplay}\n * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n * * ButtonMaker: {@link ButtonMaker}\n * * IDialogPublicResponse: {@link IDialogPublicResponse}\n * @category Popup open\n */\nexport {DialogInitializer};\n// endregion\n\n// region *** Imports for angular app.module ***\n/**\n * This is the main module of the library, it is crucial to be added within angular.app\n * imports as an example with optional argument, look: {@link IGlobalUserConfig}\n *\n * ```typescript\n * // app.module imports:\n * NgxAwesomePopupModule.forRoot({\n *     ColorList: {\n *            Primary  : '#ff9e00', // optional\n *            Secondary: '#989ea5', // optional\n *            Info     : '#2f8ee5', // optional\n *            Success  : '#3caea3', // optional\n *            Warning  : '#ffc107', // optional\n *            Danger   : '#e46464', // optional\n *            Light    : '#fbfbfb', // optional\n *            Dark     : '#343a40'  // optional\n *           }\n * })\n * ```\n * @category Imports for angular app.module\n */\nexport {NgxAwesomePopupModule} from './ngx-awesome-popup/ngx-awesome-popup.module';\n/**\n * This is the module that ignites dynamic dialog modal, its purpose is to load any angular component in\n * dialog window. Dynamic component means that user can evoke any Angular component in the popup just from typescript. Component view\n * is dynamically created with the library engine and there is no need to call any selector in HTML to create component view.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that is what will be in setup if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is called.\n * For implementation look: {@link IDialogUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *DialogConfigModule.forRoot({\n *     DialogCoreConfig: {\n *        Width        : '500px',\n *        ButtonPosition: 'right',\n *        LayoutType: DialogLayoutDisplay.INFO,\n *        LoaderComponent: // Any angular component class name can be included as a loader.\n *     },\n *     Buttons: [\n *        new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *        new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *     ],\n * })\n * ```\n * * DialogCoreConfig.LayoutType: {@link DialogLayoutDisplay}\n * * ButtonLayoutDisplay: {@link ButtonLayoutDisplay}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport {DialogConfigModule} from './ngx-awesome-popup/ngx-awesome-popup.module';\n/**\n * This is the module that ignites Confirm box dialog, its purpose is to show popup in a\n * small dialog window in the middle of the screen. User can provide title, description and include buttons.\n * Confirm box is available in predefined layout types (enums): {@link DialogLayoutDisplay}.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that's what will be used if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is evoked.\n * For implementation look: {@link IConfirmBoxUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *ConfirmBoxConfigModule.forRoot({\n *    ConfirmBoxCoreConfig: {\n *       Width: '700px',\n *       LayoutType: DialogLayoutDisplay.DANGER,\n *       ButtonPosition: 'center'\n *    },\n *    Message: {  // Optional default message object.\n *       Title: 'Default title',\n *       Description: 'Default description'\n *    },\n *    Buttons     : [\n *       new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *       new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *    ]\n * })\n * ```\n * * ConfirmBoxCoreConfig: {@link IConfirmBoxCoreConfig}\n * * Message: {@link IMessage}\n * * Buttons: {@link IButton}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport {ConfirmBoxConfigModule} from './ngx-awesome-popup/ngx-awesome-popup.module';\n/**\n * This is the module that ignites Toast notifications dialog, its purpose is to show toast popup in a\n * small dialog window in the corner of the screen. User can provide title and message and include buttons, or setup auto disappearing.\n * Toast messages are available in predefined layout types (enums): {@link DialogLayoutDisplay}.\n *\n * It is crucial for user to add this module in angular.app imports.\n * Below is the example with (optional) default user configuration, that's what will be used if there is no\n * local config when popup is evoked, that means it can be overridden directly when popup is evoked.\n * For implementation look: {@link IToastNotificationUserConfig}.\n *\n * Example:\n * ```typescript\n * // app.module imports:\n *ToastNotificationConfigModule.forRoot({\n *    ToastCoreConfig: {\n *       Width: '300px',\n *    },\n *    GlobalSettings: {\n *       // The number of toast messages that can be shown at once.\n *       AllowedMessagesAtOnce: 4,\n *\n *        // Milliseconds it will be ignored if buttons are included.\n *       AutoCloseDelay: 3000\n *    },\n *    // Optional default message object.\n *    Message: {\n *      Title: 'Default title',\n *      Description: 'Default description'\n *   },\n *   Buttons: [\n *      new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY),\n *      new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n *   ]\n *})\n * ```\n * * ToastCoreConfig: {@link IToastCoreConfig}\n * * GlobalSettings: {@link IGlobalToastSettings}\n * * Message: {@link IMessage}\n * * Buttons: {@link IButton}\n * * ButtonMaker: {@link ButtonMaker}\n * @category Imports for angular app.module\n */\nexport {ToastNotificationConfigModule} from './ngx-awesome-popup/ngx-awesome-popup.module';\n// endregion\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {fadeInOut as ɵb} from './ngx-awesome-popup/core/animations';\nexport {GlobalInterface as ɵq} from './ngx-awesome-popup/core/global';\nexport {GlobalConfigService as ɵp} from './ngx-awesome-popup/core/global-config.service';\nexport {InsertionLoaderDirective as ɵd} from './ngx-awesome-popup/core/insertion-loader.directive';\nexport {InsertionDirective as ɵc} from './ngx-awesome-popup/core/insertion.directive';\nexport {DefaultLoaderComponent as ɵf} from './ngx-awesome-popup/default-loader/default-loader.component';\nexport {ConfirmBoxWrapperComponent as ɵg} from './ngx-awesome-popup/types/confirm-box/confirm-box-wrapper/confirm-box-wrapper.component';\nexport {ConfirmBoxConfigService as ɵt} from './ngx-awesome-popup/types/confirm-box/core/confirm-box-config.service';\nexport {ConfirmBoxService as ɵl} from './ngx-awesome-popup/types/confirm-box/core/confirm-box-service';\nexport {ConfirmBoxClass as ɵh,ConfirmBoxInterface as ɵu} from './ngx-awesome-popup/types/confirm-box/core/model';\nexport {DialogConfigService as ɵr} from './ngx-awesome-popup/types/dialog/core/dialog-config.service';\nexport {DialogService as ɵk} from './ngx-awesome-popup/types/dialog/core/dialog.service';\nexport {DialogClass as ɵe,DialogInterface as ɵs} from './ngx-awesome-popup/types/dialog/core/model';\nexport {DialogWrapperComponent as ɵa} from './ngx-awesome-popup/types/dialog/dialog-wrapper/dialog-wrapper.component';\nexport {ToastNotificationClass as ɵj,ToastNotificationInterface as ɵo} from './ngx-awesome-popup/types/toast-notification/core/model';\nexport {ToastNotificationConfigService as ɵn} from './ngx-awesome-popup/types/toast-notification/core/toast-notification-config.service';\nexport {ToastNotificationService as ɵm} from './ngx-awesome-popup/types/toast-notification/core/toast-notification.service';\nexport {ToastNotificationWrapperComponent as ɵi} from './ngx-awesome-popup/types/toast-notification/toast-notification-wrapper/toast-notification-wrapper.component';"],"names":[],"mappings":"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"}