(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{xaJI:function(o,n,t){"use strict";t.r(n),t.d(n,"AdvancedExamplesModule",function(){return b});var e=t("ofXK"),i=t("3Pt+"),a=t("R9Cn"),l=t("tyNb"),c=t("FIf5"),s=t("fXoL");const r=[{path:"global-config",component:(()=>{class o{constructor(){this.ngxAwesomePopupModuleBasic="// app.module imports:\nNgxAwesomePopupModule.forRoot()",this.ngxAwesomePopupModule="// app.module imports:\nNgxAwesomePopupModule.forRoot({\n    ColorList: {\n           Primary  : '#ff9e00', // optional\n           Secondary: '#989ea5', // optional\n           Info     : '#2f8ee5', // optional\n           Success  : '#3caea3', // optional\n           Warning  : '#ffc107', // optional\n           Danger   : '#e46464', // optional\n           Light    : '#fbfbfb', // optional\n           Dark     : '#343a40'  // optional\n          }\n})",this.toastNotificationConfigModuleBasic="// app.module imports:\nToastNotificationConfigModule.forRoot()",this.toastNotificationConfigModule="// app.module imports:\nToastNotificationConfigModule.forRoot({\n   ToastCoreConfig: {\n      ToastPosition: ToastPositionEnum.TOP_FULL_WIDTH, // check API documentation ToastPositionEnum\n      ProgressBar: ToastProgressBarEnum.INCREASE, // check API documentation ToastProgressBarEnum\n      ToastUserViewType: ToastUserViewTypeEnum.SIMPLE, // check API documentation ToastUserViewTypeEnum\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      TextPosition: 'right', // check API documentation VerticalPosition\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      AutoCloseDelay: 3000, // Milliseconds it will be ignored if buttons are included.\n      DisableIcon: true, // Disable icon by default\n      AllowHTMLMessage: true, // Allow HTML content in message by default\n      // Optional default dispatch object.\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      // OpenInElementID: 'custom-toast-wrapper-id', // it can be any element as wrapper anywhere in the DOM\n   },\n   GlobalSettings: {\n      AllowedNotificationsAtOnce: 4  // The number of toast notifications that can be shown at once.\n   },\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.confirmBoxConfigModuleBasic="// app.module imports:\nConfirmBoxConfigModule.forRoot()",this.confirmBoxConfigModule="// app.module imports:\nConfirmBoxConfigModule.forRoot({\n   ConfirmBoxCoreConfig: {\n      Width: '50%', // string value with '%' or 'px' as the suffix\n      Height: '50%', // string value with '%' or 'px' as the suffix\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      Dispatch: {\n        Title: 'Global default title.',\n        Message: 'Global default message.'\n      },\n      ConfirmLabel: 'Confirm', // default confirmation button label\n      DeclineLabel: 'Decline', // default declination button label\n      DisableIcon: true, // Disable icon by default\n      AllowHTMLMessage: true, // Allow HTML content in message by default\n   }\n   // custom buttons overrides the buttons set with ConfirmLabel & DeclineLabel\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})",this.dialogConfigModuleBasic="// app.module imports:\nDialogConfigModule.forRoot()",this.dialogConfigModule="// app.module imports:\nDialogConfigModule.forRoot({\n   DialogCoreConfig: {\n      LayoutType: DialogLayoutDisplay.WARNING, // check API documentation DialogLayoutDisplay\n      ButtonPosition: 'right', // check API documentation VerticalPosition\n      DisplayLoader: true, // display the integrated loader by default\n      // LoaderComponent: TheRealAngularComponent, // it will appear as loader before content shows\n   },\n   Buttons: [\n     new ButtonMaker('Ok', 'ok', ButtonLayoutDisplay.PRIMARY), // check API documentation ButtonLayoutDisplay\n     new ButtonMaker('Cancel', 'cancel', ButtonLayoutDisplay.SECONDARY)\n  ]\n})"}ngAfterViewInit(){c.highlightAll()}}return o.\u0275fac=function(n){return new(n||o)},o.\u0275cmp=s.Ib({type:o,selectors:[["app-global-config"]],decls:57,vars:8,consts:[[1,"container"],[1,"row","m-4"],[1,"px-4","pt-2","mt-2","text-start"],[1,"row","m-0","mb-5"],[1,"language-typescript",3,"innerHTML"],["routerLink","/documentation/Interface: IGlobalUserConfig"]],template:function(o,n){1&o&&(s.Tb(0,"div",0),s.Tb(1,"div",1),s.Tb(2,"div",2),s.Tb(3,"div",3),s.Tb(4,"h3"),s.yc(5,"NgxAwesomePopupModule"),s.Sb(),s.Tb(6,"p"),s.yc(7," Imported module globally can have own settings which will reflect on the entire application. "),s.Sb(),s.Tb(8,"h6"),s.yc(9,"Basic example:"),s.Sb(),s.Tb(10,"pre"),s.Pb(11,"code",4),s.Sb(),s.Tb(12,"h6"),s.yc(13,"Example with configuration:"),s.Sb(),s.Tb(14,"p"),s.yc(15,' The "'),s.Tb(16,"a",5),s.yc(17,"ColorList"),s.Sb(),s.yc(18,'" object gives the ability to harmonize the colors of the application with different awesome popup types. The shade of '),s.Tb(19,"strong"),s.yc(20,'"Primary"'),s.Sb(),s.yc(21," color is used for overlay and primary buttons, we suggest that you match this color with your application dominant color. "),s.Sb(),s.Tb(22,"pre"),s.Pb(23,"code",4),s.Sb(),s.Sb(),s.Tb(24,"div",3),s.Tb(25,"h3"),s.yc(26,"ToastNotificationConfigModule"),s.Sb(),s.Tb(27,"h6"),s.yc(28,"Basic example:"),s.Sb(),s.Tb(29,"pre"),s.Pb(30,"code",4),s.Sb(),s.Tb(31,"h6"),s.yc(32,"Example with configuration:"),s.Sb(),s.Tb(33,"pre"),s.Pb(34,"code",4),s.Sb(),s.Sb(),s.Tb(35,"div",3),s.Tb(36,"h3"),s.yc(37,"ConfirmBoxConfigModule"),s.Sb(),s.Tb(38,"h6"),s.yc(39,"Basic example:"),s.Sb(),s.Tb(40,"pre"),s.Pb(41,"code",4),s.Sb(),s.Tb(42,"h6"),s.yc(43,"Example with configuration:"),s.Sb(),s.Tb(44,"pre"),s.Pb(45,"code",4),s.Sb(),s.Sb(),s.Tb(46,"div",3),s.Tb(47,"h3"),s.yc(48,"DialogConfigModule"),s.Sb(),s.Tb(49,"h6"),s.yc(50,"Basic example:"),s.Sb(),s.Tb(51,"pre"),s.Pb(52,"code",4),s.Sb(),s.Tb(53,"h6"),s.yc(54,"Example with configuration:"),s.Sb(),s.Tb(55,"pre"),s.Pb(56,"code",4),s.Sb(),s.Sb(),s.Sb(),s.Sb(),s.Sb()),2&o&&(s.Cb(11),s.hc("innerHTML",n.ngxAwesomePopupModuleBasic,s.rc),s.Cb(12),s.hc("innerHTML",n.ngxAwesomePopupModule,s.rc),s.Cb(7),s.hc("innerHTML",n.toastNotificationConfigModuleBasic,s.rc),s.Cb(4),s.hc("innerHTML",n.toastNotificationConfigModule,s.rc),s.Cb(7),s.hc("innerHTML",n.confirmBoxConfigModuleBasic,s.rc),s.Cb(4),s.hc("innerHTML",n.confirmBoxConfigModule,s.rc),s.Cb(7),s.hc("innerHTML",n.dialogConfigModuleBasic,s.rc),s.Cb(4),s.hc("innerHTML",n.dialogConfigModule,s.rc))},directives:[l.f],styles:[""]}),o})()},{path:"showcase",component:t("TEsR").a}];let u=(()=>{class o{}return o.\u0275mod=s.Mb({type:o}),o.\u0275inj=s.Lb({factory:function(n){return new(n||o)},imports:[[l.g.forChild(r)],l.g]}),o})(),b=(()=>{class o{}return o.\u0275mod=s.Mb({type:o}),o.\u0275inj=s.Lb({factory:function(n){return new(n||o)},imports:[[e.b,u,i.d,a.b]]}),o})()}}]);